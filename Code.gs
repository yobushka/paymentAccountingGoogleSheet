/** Funds tracker (1 family = 1 child) ‚Äî production build
 * Modes: static_per_child (fixed per family), shared_total_all, shared_total_by_payers, dynamic_by_payers, proportional_by_payers, unit_price_by_payers
 * Sheets: –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è, –°–µ–º—å–∏, –°–±–æ—Ä—ã, –£—á–∞—Å—Ç–∏–µ, –ü–ª–∞—Ç–µ–∂–∏, –ë–∞–ª–∞–Ω—Å, –î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è, –°–≤–æ–¥–∫–∞, Lists(hidden)
 * Dropdowns show "–ù–∞–∑–≤–∞–Ω–∏–µ (ID)" everywhere; logic extracts IDs.
 * Dates matter only in Payments for reference; calculations are instant.
 *
 * Menu:
 *  ‚Ä¢ Setup / Rebuild structure
 *  ‚Ä¢ Rebuild data validations
 *  ‚Ä¢ Recalculate (Balance & Detail)
 *  ‚Ä¢ Generate IDs (all sheets)
 *  ‚Ä¢ Close Collection (fix x & set Closed)
 *  ‚Ä¢ Load Sample Data (separate)  ‚Üê fills demo families, collections, participation, and payments
 *
 * Custom functions for sheet formulas:
 *  ‚Ä¢ LABEL_TO_ID(value)
 *  ‚Ä¢ PAYED_TOTAL_FAMILY(familyLabelOrId)
 *  ‚Ä¢ ACCRUED_FAMILY(familyLabelOrId, statusFilter="OPEN"|"ALL")
 *  ‚Ä¢ DYN_CAP(T, payments_range)
 */

function onOpen() {
  const ui = SpreadsheetApp.getUi();
  ui.createMenu('üí∞ –§–æ–Ω–¥—ã')
    .addItem('üîß –ù–∞—Å—Ç—Ä–æ–∏—Ç—å / –ü–µ—Ä–µ—Å–æ–∑–¥–∞—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—É', 'init')
    .addItem('üîÑ –ü–µ—Ä–µ—Å–æ–∑–¥–∞—Ç—å –≤–∞–ª–∏–¥–∞—Ü–∏–∏', 'rebuildValidations')
    .addSeparator()
    .addSubMenu(ui.createMenu('üìä –û—Ç—á—ë—Ç—ã –∏ –¥–µ–π—Å—Ç–≤–∏—è')
      .addItem('üîÑ –ü–µ—Ä–µ—Å—á–∏—Ç–∞—Ç—å –≤—Å—ë', 'recalculateAll')
      .addItem('üìà –ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞', 'showQuickBalanceCheck_')
      .addItem('‚ö†Ô∏è –ü–æ–∫–∞–∑–∞—Ç—å –æ—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏', 'showValidationErrors_'))
    .addSubMenu(ui.createMenu('üé® –í–Ω–µ—à–Ω–∏–π –≤–∏–¥ –∏ –æ—á–∏—Å—Ç–∫–∞')
      .addItem('‚ú® –û—á–∏—Å—Ç–∏—Ç—å –ª–∏—à–Ω–µ–µ (–æ–±—Ä–µ–∑–∞—Ç—å –ª–∏—Å—Ç—ã)', 'cleanupWorkbook_')
      .addItem('üéØ –í—ã–¥–µ–ª–∏—Ç—å –∫–ª—é—á–µ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ', 'highlightKeyData_')
      .addItem('üì± –ú–æ–±–∏–ª—å–Ω—ã–π –≤–∏–¥', 'setupMobileView_'))
    .addSeparator()
    .addSubMenu(ui.createMenu('‚öôÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã–º–∏')
      .addItem('üÜî –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å ID (–≤—Å–µ –ª–∏—Å—Ç—ã)', 'generateAllIds')
      .addItem('üîí –ó–∞–∫—Ä—ã—Ç—å —Å–±–æ—Ä (–∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞—Ç—å x –∏ –ø–æ–º–µ—Ç–∏—Ç—å ¬´–ó–∞–∫—Ä—ã—Ç¬ª)', 'closeCollectionPrompt')
      .addItem('üìã –î—É–±–ª–∏—Ä–æ–≤–∞—Ç—å —Å–±–æ—Ä', 'duplicateCollection_'))
    .addSeparator()
    .addItem('üé≤ –ó–∞–≥—Ä—É–∑–∏—Ç—å –ø—Ä–∏–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö', 'loadSampleDataPrompt')
    .addItem('‚ùì –ë—ã—Å—Ç—Ä–∞—è –ø–æ–º–æ—â—å', 'showQuickHelp_')
    .addToUi();
  // Ensure header notes are set on open as well
  setupHeaderNotes_();
  // Show welcome toast for first-time users
  showWelcomeToast_();
  try { addHeaderNotes_(); } catch(e) {}
}

// Auto-refresh Balance on relevant edits
function onEdit(e) {
  try {
    const sh = e && e.range && e.range.getSheet();
    if (!sh) return;
    const name = sh.getName();
    
    // Only refresh Balance for significant changes, not every edit
    if (name === '–ü–ª–∞—Ç–µ–∂–∏') {
  const start = e.range.getColumn();
  const end = start + e.range.getNumColumns() - 1;
  const map = getHeaderMap_(sh);
  const keys = [map['family_id (label)'], map['collection_id (label)'], map['–°—É–º–º–∞']].filter(Boolean);
  const overlaps = keys.some(c => c >= start && c <= end);
  if (overlaps) refreshBalanceFormulas_();
    } else if (name === '–°–µ–º—å–∏') {
  const start = e.range.getColumn();
  const end = start + e.range.getNumColumns() - 1;
  const map = getHeaderMap_(sh);
  const keys = [map['family_id'], map['–ê–∫—Ç–∏–≤–µ–Ω']].filter(Boolean);
  const overlaps = keys.some(c => c >= start && c <= end);
  if (overlaps) refreshBalanceFormulas_();
    } else if (name === '–°–±–æ—Ä—ã') {
      // Mode/participants changes affect accruals; refresh Balance
      refreshBalanceFormulas_();
    } else if (name === '–ë–∞–ª–∞–Ω—Å') {
      const col = e.range.getColumn();
      // Only refresh if changing the selector
      if (col === 9) { // Column I (selector)
        refreshBalanceFormulas_();
      }
    }
    
    // Detail & Summary sheet refresh for broader changes
    if (name === '–ü–ª–∞—Ç–µ–∂–∏' || name === '–°–µ–º—å–∏' || name === '–°–±–æ—Ä—ã' || name === '–£—á–∞—Å—Ç–∏–µ' || name === '–î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è' || name === '–°–≤–æ–¥–∫–∞') {
      refreshDetailSheet_();
      refreshSummarySheet_();
    }
    
    // Auto-generate IDs when user starts filling key fields
    if (name === '–°–µ–º—å–∏') maybeAutoIdRow_(sh, e.range.getRow(), 'family_id', 'F', 3, ['–†–µ–±—ë–Ω–æ–∫ –§–ò–û']);
    else if (name === '–°–±–æ—Ä—ã') maybeAutoIdRow_(sh, e.range.getRow(), 'collection_id', 'C', 3, ['–ù–∞–∑–≤–∞–Ω–∏–µ —Å–±–æ—Ä–∞']);
    else if (name === '–ü–ª–∞—Ç–µ–∂–∏') maybeAutoIdRow_(sh, e.range.getRow(), 'payment_id', 'PMT', 3, ['–î–∞—Ç–∞','family_id (label)','collection_id (label)','–°—É–º–º–∞']);
  } catch (err) {
    // silent guard
  }
}/** =========================
 *  INITIALIZATION / STRUCTURE
 *  ========================= */
function init() {
  const ss = SpreadsheetApp.getActive();
  const specs = getSheetsSpec();

  // Create/clear sheets and headers
  for (const spec of specs) {
    const sh = getOrCreateSheet(ss, spec.name);
    // Non-destructive rebuild: preserve data, refresh headers/widths/formats
    sh.setFrozenRows(1);
    sh.getRange(1, 1, 1, spec.headers.length).setValues([spec.headers]);
    spec.colWidths?.forEach((w, i) => { if (w) sh.setColumnWidth(i + 1, w); });
    if (spec.dateCols?.length) {
      const last = Math.max(2, sh.getMaxRows());
      spec.dateCols.forEach(c => sh.getRange(2, c, last - 1, 1).setNumberFormat('yyyy-mm-dd'));
    }
  }

  // Fill instruction page
  setupInstructionSheet();

  // Hidden helper sheet with dynamic lists (labels)
  setupListsSheet();

  // Named ranges (labels and raw ids if needed)
  ensureNamedRange('FAMILIES_LABELS',        'Lists!D2:D'); // all families labels
  ensureNamedRange('ACTIVE_FAMILIES_LABELS', 'Lists!C2:C'); // active only
  ensureNamedRange('COLLECTIONS_LABELS',     'Lists!B2:B'); // all collections labels
  ensureNamedRange('OPEN_COLLECTIONS_LABELS','Lists!A2:A'); // open only
  setRawIdNamedRanges_();

  rebuildValidations();
  setupBalanceExamples();

  // Header notes (hover tooltips)
  addHeaderNotes_();

  // Visual styling (headers, formats, filters, banding, conditional formats)
  styleWorkbook_();

  // Remove legacy DynCalc sheet if present
  try { const legacy = ss.getSheetByName('DynCalc'); if (legacy) ss.deleteSheet(legacy); } catch (_) {}

  SpreadsheetApp.getActive().toast('Structure created/updated.', 'Funds');
}

/** Cleanup visuals: trim extra rows/columns to used area and re-apply styles */
function cleanupWorkbook_() {
  const ss = SpreadsheetApp.getActive();
  const sheets = ['–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è','–°–µ–º—å–∏','–°–±–æ—Ä—ã','–£—á–∞—Å—Ç–∏–µ','–ü–ª–∞—Ç–µ–∂–∏','–ë–∞–ª–∞–Ω—Å','–î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è','–°–≤–æ–¥–∫–∞'];
  sheets.forEach(name => {
    const sh = ss.getSheetByName(name); if (!sh) return;
    const lastRow = Math.max(1, sh.getLastRow());
    const lastCol = Math.max(1, sh.getLastColumn());
    // Trim rows
    const maxRows = sh.getMaxRows();
    if (maxRows > lastRow + 50) { // keep a small buffer
      try { sh.deleteRows(lastRow + 51, maxRows - (lastRow + 50)); } catch(_) {}
    }
    // Trim columns
    const maxCols = sh.getMaxColumns();
    if (maxCols > lastCol) {
      try { sh.deleteColumns(lastCol + 1, maxCols - lastCol); } catch(_) {}
    }
  });
  // Re-apply styles
  styleWorkbook_();
  SpreadsheetApp.getActive().toast('Sheets trimmed and visuals refreshed.', 'Funds');
}

/** =========================
 *  VISUAL STYLING
 *  ========================= */
function styleWorkbook_() {
  const ss = SpreadsheetApp.getActive();
  const names = ['–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è','–°–µ–º—å–∏','–°–±–æ—Ä—ã','–£—á–∞—Å—Ç–∏–µ','–ü–ª–∞—Ç–µ–∂–∏','–ë–∞–ª–∞–Ω—Å','–î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è','–°–≤–æ–¥–∫–∞'];
  names.forEach(n => {
    const sh = ss.getSheetByName(n);
    if (!sh) return;
    styleSheetHeader_(sh);
    if (n === '–ë–∞–ª–∞–Ω—Å') styleBalanceSheet_(sh);
    else if (n === '–î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è') styleDetailSheet_(sh);
    else if (n === '–°–≤–æ–¥–∫–∞') styleSummarySheet_(sh);
    else if (n === '–ü–ª–∞—Ç–µ–∂–∏') stylePaymentsSheet_(sh);
    else if (n === '–°–±–æ—Ä—ã') styleCollectionsSheet_(sh);
    else if (n === '–°–µ–º—å–∏') styleFamiliesSheet_(sh);
    else if (n === '–£—á–∞—Å—Ç–∏–µ') styleParticipationSheet_(sh);
    // Hide gridlines on display sheets
    try {
      if (n === '–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è' || n === '–ë–∞–ª–∞–Ω—Å' || n === '–î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è' || n === '–°–≤–æ–¥–∫–∞') sh.setHiddenGridlines(true);
      else sh.setHiddenGridlines(false);
    } catch (_) {}
  });
}

/** =========================
 *  UX ENHANCEMENT FUNCTIONS
 *  ========================= */

function showWelcomeToast_() {
  try {
    const ss = SpreadsheetApp.getActive();
    const instructionSheet = ss.getSheetByName('–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è');
    if (instructionSheet && instructionSheet.getRange('A2').getValue() === '') {
      // First time user - show welcome
      ss.toast('–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ù–∞—á–Ω–∏—Ç–µ —Å Funds ‚Üí Setup, –∑–∞—Ç–µ–º –∏–∑—É—á–∏—Ç–µ –ª–∏—Å—Ç "–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è".', 'üí∞ Funds Tracker', 10);
    }
  } catch (e) {
    Logger.log('Welcome toast error: ' + e.message);
  }
}

function showQuickHelp_() {
  const ui = SpreadsheetApp.getUi();
  const help = `
üèÉ‚Äç‚ôÇÔ∏è –ë–´–°–¢–†–´–ô –°–¢–ê–†–¢:
1. Funds ‚Üí Setup (–µ—Å–ª–∏ –Ω–µ —Å–¥–µ–ª–∞–ª–∏)
2. –ó–∞–ø–æ–ª–Ω–∏—Ç–µ "–°–µ–º—å–∏" (–ê–∫—Ç–∏–≤–µ–Ω=–î–∞)
3. –°–æ–∑–¥–∞–π—Ç–µ "–°–±–æ—Ä—ã" (–°—Ç–∞—Ç—É—Å=–û—Ç–∫—Ä—ã—Ç)
4. –í–Ω–æ—Å–∏—Ç–µ "–ü–ª–∞—Ç–µ–∂–∏"
5. –°–º–æ—Ç—Ä–∏—Ç–µ "–ë–∞–ª–∞–Ω—Å" –∏ "–°–≤–æ–¥–∫–∞"

üéØ –ü–û–õ–ï–ó–ù–´–ï –õ–ò–°–¢–´:
‚Ä¢ "–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è" - –ø–æ–¥—Ä–æ–±–Ω–æ–µ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ
‚Ä¢ "–ë–∞–ª–∞–Ω—Å" - –∫—Ç–æ —Å–∫–æ–ª—å–∫–æ –¥–æ–ª–∂–µ–Ω/–ø–µ—Ä–µ–ø–ª–∞—Ç–∏–ª
‚Ä¢ "–°–≤–æ–¥–∫–∞" - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å–±–æ—Ä–∞–º
‚Ä¢ "–î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è" - —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ –ø–æ —Å–µ–º—å—è–º

‚ö° –ë–´–°–¢–†–´–ï –î–ï–ô–°–¢–í–ò–Ø:
‚Ä¢ Funds ‚Üí Quick Balance Check
‚Ä¢ Funds ‚Üí Recalculate All
‚Ä¢ Funds ‚Üí Highlight Key Data

‚ùì –ü—Ä–æ–±–ª–µ–º—ã? –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–∏—Å—Ç "–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è" —Ä–∞–∑–¥–µ–ª "–°–æ–≤–µ—Ç—ã".`;
  
  ui.alert('üí∞ Funds Tracker - –°–ø—Ä–∞–≤–∫–∞', help, ui.ButtonSet.OK);
}

function showQuickBalanceCheck_() {
  try {
    const ss = SpreadsheetApp.getActive();
    const shBal = ss.getSheetByName('–ë–∞–ª–∞–Ω—Å');
    if (!shBal) {
      SpreadsheetApp.getUi().alert('–û—à–∏–±–∫–∞', '–õ–∏—Å—Ç "–ë–∞–ª–∞–Ω—Å" –Ω–µ –Ω–∞–π–¥–µ–Ω. –í—ã–ø–æ–ª–Ω–∏—Ç–µ Setup.', SpreadsheetApp.getUi().ButtonSet.OK);
      return;
    }
    
    // Count families with debts and overpayments
    const lastRow = shBal.getLastRow();
    if (lastRow < 2) {
      ss.toast('–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞.', 'Balance Check');
      return;
    }
    
    const data = shBal.getRange(2, 1, lastRow-1, 6).getValues();
    let totalFamilies = 0, withDebts = 0, withOverpay = 0;
    let totalDebt = 0, totalOverpay = 0;
    
    data.forEach(row => {
      if (row[0]) { // has family_id
        totalFamilies++;
        const overpay = Number(row[2]) || 0;
        const debt = Number(row[5]) || 0;
        if (debt > 0) { withDebts++; totalDebt += debt; }
        if (overpay > 0) { withOverpay++; totalOverpay += overpay; }
      }
    });
    
    const report = `
üìä –ë–´–°–¢–†–ê–Ø –°–í–û–î–ö–ê –ü–û –ë–ê–õ–ê–ù–°–ê–ú:

üë• –°–µ–º—å–∏: ${totalFamilies}
üí∏ –° –∑–∞–¥–æ–ª–∂–µ–Ω–Ω–æ—Å—Ç—å—é: ${withDebts} (–æ–±—â–∞—è —Å—É–º–º–∞: ${totalDebt.toFixed(2)} ‚ÇΩ)
üí∞ –° –ø–µ—Ä–µ–ø–ª–∞—Ç–æ–π: ${withOverpay} (–æ–±—â–∞—è —Å—É–º–º–∞: ${totalOverpay.toFixed(2)} ‚ÇΩ)
‚úÖ –ë–∞–ª–∞–Ω—Å "–Ω–æ–ª—å": ${totalFamilies - withDebts - withOverpay}

${withDebts > 0 ? '‚ö†Ô∏è –ï—Å—Ç—å –∑–∞–¥–æ–ª–∂–µ–Ω–Ω–æ—Å—Ç–∏!' : '‚úÖ –ó–∞–¥–æ–ª–∂–µ–Ω–Ω–æ—Å—Ç–µ–π –Ω–µ—Ç'}
${totalOverpay > totalDebt ? 'üí° –ü–µ—Ä–µ–ø–ª–∞—Ç –±–æ–ª—å—à–µ –¥–æ–ª–≥–æ–≤ - –º–æ–∂–Ω–æ –∑–∞—á–µ—Å—Ç—å' : ''}`;
    
    SpreadsheetApp.getUi().alert('üí∞ –ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–æ–≤', report, SpreadsheetApp.getUi().ButtonSet.OK);
  } catch (e) {
    toastErr_('Quick balance check failed: ' + e.message);
  }
}

function showValidationErrors_() {
  try {
    const ss = SpreadsheetApp.getActive();
    const issues = [];
    
    // Check for families without IDs
    const shF = ss.getSheetByName('–°–µ–º—å–∏');
    if (shF && shF.getLastRow() > 1) {
      const mapF = getHeaderMap_(shF);
      const ids = shF.getRange(2, mapF['family_id'], shF.getLastRow()-1, 1).getValues().flat();
      const emptyIds = ids.filter((id, idx) => !id).length;
      if (emptyIds > 0) issues.push(`‚Ä¢ –°–µ–º—å–∏: ${emptyIds} —Å—Ç—Ä–æ–∫ –±–µ–∑ ID`);
    }
    
    // Check for collections without IDs
    const shC = ss.getSheetByName('–°–±–æ—Ä—ã');
    if (shC && shC.getLastRow() > 1) {
      const mapC = getHeaderMap_(shC);
      const ids = shC.getRange(2, mapC['collection_id'], shC.getLastRow()-1, 1).getValues().flat();
      const emptyIds = ids.filter(id => !id).length;
      if (emptyIds > 0) issues.push(`‚Ä¢ –°–±–æ—Ä—ã: ${emptyIds} —Å—Ç—Ä–æ–∫ –±–µ–∑ ID`);
    }
    
    // Check payments
    const shP = ss.getSheetByName('–ü–ª–∞—Ç–µ–∂–∏');
    if (shP && shP.getLastRow() > 1) {
      const mapP = getHeaderMap_(shP);
      const amounts = shP.getRange(2, mapP['–°—É–º–º–∞'], shP.getLastRow()-1, 1).getValues().flat();
      const invalidAmounts = amounts.filter((amt, idx) => amt !== '' && (isNaN(amt) || Number(amt) <= 0)).length;
      if (invalidAmounts > 0) issues.push(`‚Ä¢ –ü–ª–∞—Ç–µ–∂–∏: ${invalidAmounts} –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö —Å—É–º–º`);
    }
    
    if (issues.length === 0) {
      ss.toast('‚úÖ –ü—Ä–æ–±–ª–µ–º –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ!', 'Validation Check', 5);
    } else {
      const report = '‚ö†Ô∏è –ù–ê–ô–î–ï–ù–ù–´–ï –ü–†–û–ë–õ–ï–ú–´:\n\n' + issues.join('\n') + '\n\nüí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ Funds ‚Üí Generate IDs –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è.';
      SpreadsheetApp.getUi().alert('–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö', report, SpreadsheetApp.getUi().ButtonSet.OK);
    }
  } catch (e) {
    toastErr_('Validation check failed: ' + e.message);
  }
}

function highlightKeyData_() {
  try {
    const ss = SpreadsheetApp.getActive();
    
    // Highlight negative balances in red, positive in green
    const shBal = ss.getSheetByName('–ë–∞–ª–∞–Ω—Å');
    if (shBal && shBal.getLastRow() > 1) {
      const map = getHeaderMap_(shBal);
      if (map['–ó–∞–¥–æ–ª–∂–µ–Ω–Ω–æ—Å—Ç—å']) {
        const rng = shBal.getRange(2, map['–ó–∞–¥–æ–ª–∂–µ–Ω–Ω–æ—Å—Ç—å'], shBal.getLastRow()-1, 1);
        rng.setBackground('#ffebee'); // Light red background
        // Add bold formatting for values > 0
        const values = rng.getValues();
        for (let i = 0; i < values.length; i++) {
          if (values[i][0] > 0) {
            shBal.getRange(2+i, map['–ó–∞–¥–æ–ª–∂–µ–Ω–Ω–æ—Å—Ç—å']).setFontWeight('bold');
          }
        }
      }
    }
    
    ss.toast('‚ú® –ö–ª—é—á–µ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –≤—ã–¥–µ–ª–µ–Ω—ã', 'Highlight Data', 3);
  } catch (e) {
    toastErr_('Highlight failed: ' + e.message);
  }
}

function setupMobileView_() {
  try {
    const ss = SpreadsheetApp.getActive();
    const sheets = ['–ë–∞–ª–∞–Ω—Å', '–°–≤–æ–¥–∫–∞', '–ü–ª–∞—Ç–µ–∂–∏'];
    
    sheets.forEach(sheetName => {
      const sh = ss.getSheetByName(sheetName);
      if (sh) {
        // Set optimal column widths for mobile
        sh.setColumnWidth(1, 100); // IDs shorter
        if (sheetName === '–ë–∞–ª–∞–Ω—Å') {
          sh.setColumnWidth(2, 180); // Names
          sh.setColumnWidths(3, 4, 120); // Numbers
        }
        // Hide less important columns for mobile
        if (sheetName === '–ü–ª–∞—Ç–µ–∂–∏') {
          const map = getHeaderMap_(sh);
          if (map['–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π']) sh.hideColumns(map['–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π']);
          if (map['payment_id']) sh.hideColumns(map['payment_id']);
        }
      }
    });
    
    ss.toast('üì± –ú–æ–±–∏–ª—å–Ω—ã–π –≤–∏–¥ –Ω–∞—Å—Ç—Ä–æ–µ–Ω', 'Mobile View', 3);
  } catch (e) {
    toastErr_('Mobile setup failed: ' + e.message);
  }
}

function duplicateCollection_() {
  try {
    const ss = SpreadsheetApp.getActive();
    const shC = ss.getSheetByName('–°–±–æ—Ä—ã');
    if (!shC) return;
    
    const ui = SpreadsheetApp.getUi();
    const response = ui.prompt('–î—É–±–ª–∏—Ä–æ–≤–∞—Ç—å —Å–±–æ—Ä', '–í–≤–µ–¥–∏—Ç–µ ID —Å–±–æ—Ä–∞ –¥–ª—è –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, C001):', ui.ButtonSet.OK_CANCEL);
    
    if (response.getSelectedButton() !== ui.Button.OK) return;
    
    const sourceId = response.getResponseText().trim();
    if (!sourceId) return;
    
    // Find source collection
    const map = getHeaderMap_(shC);
    const data = shC.getRange(2, 1, shC.getLastRow()-1, shC.getLastColumn()).getValues();
    const sourceRow = data.find(row => row[map['collection_id']-1] === sourceId);
    
    if (!sourceRow) {
      ui.alert('–û—à–∏–±–∫–∞', `–°–±–æ—Ä ${sourceId} –Ω–µ –Ω–∞–π–¥–µ–Ω.`, ui.ButtonSet.OK);
      return;
    }
    
    // Create new row with new ID
    const newId = generateNextId_(data.map(r => r[map['collection_id']-1]), 'C', 3);
    const newRow = [...sourceRow];
    newRow[map['collection_id']-1] = newId;
    newRow[map['–ù–∞–∑–≤–∞–Ω–∏–µ —Å–±–æ—Ä–∞']-1] = sourceRow[map['–ù–∞–∑–≤–∞–Ω–∏–µ —Å–±–æ—Ä–∞']-1] + ' (–∫–æ–ø–∏—è)';
    newRow[map['–°—Ç–∞—Ç—É—Å']-1] = '–û—Ç–∫—Ä—ã—Ç';
    
    // Add to sheet
    shC.appendRow(newRow);
    
    ss.toast(`‚úÖ –°–±–æ—Ä –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω –∫–∞–∫ ${newId}`, 'Duplicate Collection', 5);
    rebuildValidations(); // Refresh dropdowns
  } catch (e) {
    toastErr_('Duplicate collection failed: ' + e.message);
  }
}

/** Adds helpful hover notes to header cells across main sheets */
function addHeaderNotes_() {
  const ss = SpreadsheetApp.getActive();
  // Enhanced notes with emojis and better explanations
  
  // –°–µ–º—å–∏
  (function(){
    const sh = ss.getSheetByName('–°–µ–º—å–∏'); if (!sh) return;
    const notes = {
      '–†–µ–±—ë–Ω–æ–∫ –§–ò–û': 'üë∂ –§–∞–º–∏–ª–∏—è –ò–º—è –û—Ç—á–µ—Å—Ç–≤–æ —Ä–µ–±—ë–Ω–∫–∞.\n–û–¥–Ω–∞ —Å—Ç—Ä–æ–∫–∞ = –æ–¥–Ω–∞ —Å–µ–º—å—è (–æ–¥–∏–Ω —Ä–µ–±—ë–Ω–æ–∫).',
      '–î–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è': 'üéÇ –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è —Ä–µ–±—ë–Ω–∫–∞ (—Ñ–æ—Ä–º–∞—Ç yyyy-mm-dd).\n–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Å–ø—Ä–∞–≤–æ—á–Ω–æ –¥–ª—è –≤–æ–∑—Ä–∞—Å—Ç–Ω–æ–π –∞–Ω–∞–ª–∏—Ç–∏–∫–∏.',
      '–ú–∞–º–∞ —Ç–µ–ª–µ–≥—Ä–∞–º': 'üì± –ö–æ–Ω—Ç–∞–∫—Ç –º–∞–º—ã –≤ Telegram (@username –∏–ª–∏ —Å—Å—ã–ª–∫–∞)\n–î–ª—è –æ–ø–µ—Ä–∞—Ç–∏–≤–Ω–æ–π —Å–≤—è–∑–∏ –ø–æ –ø–ª–∞—Ç–µ–∂–∞–º.',
      '–ü–∞–ø–∞ —Ç–µ–ª–µ–≥—Ä–∞–º': 'üì± –ö–æ–Ω—Ç–∞–∫—Ç –ø–∞–ø—ã –≤ Telegram (@username –∏–ª–∏ —Å—Å—ã–ª–∫–∞)\n–î–ª—è –æ–ø–µ—Ä–∞—Ç–∏–≤–Ω–æ–π —Å–≤—è–∑–∏ –ø–æ –ø–ª–∞—Ç–µ–∂–∞–º.',
      '–ú–∞–º–∞ –§–ò–û': 'üë© –ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –º–∞–º—ã.\n–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Å–ø—Ä–∞–≤–æ—á–Ω–æ.',
      '–ê–∫—Ç–∏–≤–µ–Ω': '‚úÖ –î–∞ ‚Äî —Å–µ–º—å—è —É—á–∞—Å—Ç–≤—É–µ—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤–æ –≤—Å–µ—Ö –æ—Ç–∫—Ä—ã—Ç—ã—Ö —Å–±–æ—Ä–∞—Ö\n‚ùå –ù–µ—Ç ‚Äî –∏—Å–∫–ª—é—á–µ–Ω–∞ –∏–∑ —É—á–∞—Å—Ç–∏—è (–µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω–∞ –≤ ¬´–£—á–∞—Å—Ç–∏–µ¬ª)',
      '–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π': 'üìù –õ—é–±–∞—è –∑–∞–º–µ—Ç–∫–∞ –ø–æ —Å–µ–º—å–µ.\n–ù–∞–ø—Ä–∏–º–µ—Ä: –ª—å–≥–æ—Ç—ã, –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ –æ–ø–ª–∞—Ç—ã.',
      'family_id': 'üÜî –ê–≤—Ç–æ-ID —Å–µ–º—å–∏ (F001, F002, ...).\n‚ö†Ô∏è –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ - –Ω–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ!'
    };
    setHeaderNotes_(sh, notes);
  })();

  // –°–±–æ—Ä—ã - enhanced notes
  (function(){
    const sh = ss.getSheetByName('–°–±–æ—Ä—ã'); if (!sh) return;
    const notes = {
      '–ù–∞–∑–≤–∞–Ω–∏–µ —Å–±–æ—Ä–∞': 'üìã –ö–æ—Ä–æ—Ç–∫–æ–µ –∏ –ø–æ–Ω—è—Ç–Ω–æ–µ –∏–º—è —Å–±–æ—Ä–∞.\n–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è –≤ –≤—ã–ø–∞–¥–∞—é—â–∏—Ö —Å–ø–∏—Å–∫–∞—Ö –ø–ª–∞—Ç–µ–∂–µ–π.',
      '–°—Ç–∞—Ç—É—Å': 'üîì –û—Ç–∫—Ä—ã—Ç ‚Äî —É—á–∞—Å—Ç–≤—É–µ—Ç –≤ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è—Ö\nüîí –ó–∞–∫—Ä—ã—Ç ‚Äî –Ω–µ –≤–ª–∏—è–µ—Ç (—Ç–æ–ª—å–∫–æ –æ–ø–ª–∞—Ç—ã/–≤–æ–∑–≤—Ä–∞—Ç—ã)',
      '–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞': 'üìÖ –°–ø—Ä–∞–≤–æ—á–Ω–æ. –ù–∞ —Ä–∞—Å—á—ë—Ç—ã –Ω–µ –≤–ª–∏—è–µ—Ç.\n–ü–æ–ª–µ–∑–Ω–æ –¥–ª—è –æ—Ç—á—ë—Ç–Ω–æ—Å—Ç–∏.',
      '–î–µ–¥–ª–∞–π–Ω': '‚è∞ –°–ø—Ä–∞–≤–æ—á–Ω–æ. –ù–∞ —Ä–∞—Å—á—ë—Ç—ã –Ω–µ –≤–ª–∏—è–µ—Ç.\n–î–ª—è –∫–æ–Ω—Ç—Ä–æ–ª—è —Å—Ä–æ–∫–æ–≤ —Å–±–æ—Ä–∞.',
  '–ù–∞—á–∏—Å–ª–µ–Ω–∏–µ': '‚öôÔ∏è –†–µ–∂–∏–º —Ä–∞—Å—á—ë—Ç–∞:\n‚Ä¢ static_per_child - —Ñ–∏–∫—Å –Ω–∞ —Å–µ–º—å—é\n‚Ä¢ shared_total_all - –æ–±—â–∞—è —Å—É–º–º–∞ –Ω–∞ –≤—Å–µ—Ö\n‚Ä¢ shared_total_by_payers - –Ω–∞ –æ–ø–ª–∞—Ç–∏–≤—à–∏—Ö\n‚Ä¢ dynamic_by_payers - –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–µ –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏–µ (water-filling)\n‚Ä¢ proportional_by_payers - –ø—Ä–æ–ø–æ—Ä—Ü–∏–æ–Ω–∞–ª—å–Ω–æ –ø–ª–∞—Ç–µ–∂–∞–º (–±–µ–∑ –¥–æ–ª–≥–æ–≤)\n‚Ä¢ unit_price_by_payers - –ø–æ—à—Ç—É—á–Ω–æ: x=¬´–§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π x¬ª (—Ü–µ–Ω–∞ –∑–∞ –µ–¥–∏–Ω–∏—Ü—É), —Å–ø–∏—Å—ã–≤–∞–µ—Ç—Å—è floor(P_i/x)*x (–ø–æ–ª–Ω—ã–º–∏ –µ–¥–∏–Ω–∏—Ü–∞–º–∏) —Ç–æ–ª—å–∫–æ —É –ø–ª–∞—Ç–∏–≤—à–∏—Ö',
      '–ü–∞—Ä–∞–º–µ—Ç—Ä —Å—É–º–º—ã': 'üí∞ –†–∞–∑–º–µ—Ä –≤–∑–Ω–æ—Å–∞ –∏–ª–∏ –æ–±—â–∞—è —Ü–µ–ª—å:\n‚Ä¢ static_per_child: —Å—É–º–º–∞ —Å —Å–µ–º—å–∏\n‚Ä¢ –¥—Ä—É–≥–∏–µ —Ä–µ–∂–∏–º—ã: –æ–±—â–∞—è —Ü–µ–ª—å T',
  '–§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π x': 'üîí –î–ª—è dynamic_by_payers ‚Äî cap –ø–æ—Å–ª–µ –∑–∞–∫—Ä—ã—Ç–∏—è (–¥–æ –∑–∞–∫—Ä—ã—Ç–∏—è —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏).\n–î–ª—è unit_price_by_payers ‚Äî —Ü–µ–Ω–∞ –∑–∞ –æ–¥–Ω—É –µ–¥–∏–Ω–∏—Ü—É.',
  '–ó–∞–∫—É–ø–∫–∞ –∏–∑ —Å—Ä–µ–¥—Å—Ç–≤': 'üõí –ò—Å—Ç–æ—á–Ω–∏–∫ –∑–∞–∫—É–ø–∫–∏: –∏–∑ –∫–∞–∫–∏—Ö –¥–µ–Ω–µ–≥ –±—ã–ª–∞ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∞ –∑–∞–∫—É–ø–∫–∞ –ø–æ —ç—Ç–æ–º—É —Å–±–æ—Ä—É. –ü—Ä–∏–º–µ—Ä—ã: "–ö–ª–∞—Å—Å–Ω—ã–π —Ñ–æ–Ω–¥", "–ü–æ–∂–µ—Ä—Ç–≤–æ–≤–∞–Ω–∏—è", "–õ–∏—á–Ω—ã–µ".',
  '–í–æ–∑–º–µ—â–µ–Ω–æ': '‚ôªÔ∏è –û—Ç–º–µ—á–∞–π—Ç–µ "–î–∞", –µ—Å–ª–∏ –∑–∞–∫—É–ø–∫–∞ —É–∂–µ –≤–æ–∑–º–µ—â–µ–Ω–∞ –∏–∑ —Å–æ–±—Ä–∞–Ω–Ω—ã—Ö —Å—Ä–µ–¥—Å—Ç–≤; "–ù–µ—Ç" ‚Äî –µ—Å–ª–∏ –≤–æ–∑–º–µ—â–µ–Ω–∏–µ –µ—â—ë –ø—Ä–µ–¥—Å—Ç–æ–∏—Ç.',
      '–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π': 'üìù –û–ø–∏—Å–∞–Ω–∏–µ —Å–±–æ—Ä–∞, —Ü–µ–ª–∏, –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏.\n–í–∏–¥–Ω–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º.',
      'collection_id': 'üÜî –ê–≤—Ç–æ-ID —Å–±–æ—Ä–∞ (C001, C002, ...).\n‚ö†Ô∏è –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ - –Ω–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ!',
      '–°—Å—ã–ª–∫–∞ –Ω–∞ –≥—É–≥–ª–¥–∏—Å–∫': '‚òÅÔ∏è –°—Å—ã–ª–∫–∞ –Ω–∞ –ø–∞–ø–∫—É/—Ñ–∞–π–ª Google Drive.\n–î–ª—è –æ—Ç—á—ë—Ç–æ–≤, –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –ø–æ —Å–±–æ—Ä—É.'
    };
    setHeaderNotes_(sh, notes);
  })();

  // –ü–ª–∞—Ç–µ–∂–∏ - enhanced notes  
  (function(){
    const sh = ss.getSheetByName('–ü–ª–∞—Ç–µ–∂–∏'); if (!sh) return;
    const notes = {
      '–î–∞—Ç–∞': 'üìÖ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–µ –ø–æ–ª–µ.\n–†–∞—Å—á—ë—Ç—ã –º–≥–Ω–æ–≤–µ–Ω–Ω—ã–µ, –¥–∞—Ç–∞ –Ω–∞ –Ω–∏—Ö –Ω–µ –≤–ª–∏—è–µ—Ç.',
      'family_id (label)': 'üë®‚Äçüë©‚Äçüëß‚Äçüë¶ –í—ã–±–µ—Ä–∏—Ç–µ –ø–ª–∞—Ç–µ–ª—å—â–∏–∫–∞ –∏–∑ —Å–ø–∏—Å–∫–∞.\n–§–æ—Ä–º–∞—Ç: "–ò–º—è —Ä–µ–±—ë–Ω–∫–∞ (F001)"',
      'collection_id (label)': 'üìã –í—ã–±–µ—Ä–∏—Ç–µ —Å–±–æ—Ä –∏–∑ —Å–ø–∏—Å–∫–∞.\n–§–æ—Ä–º–∞—Ç: "–ù–∞–∑–≤–∞–Ω–∏–µ —Å–±–æ—Ä–∞ (C001)"',
      '–°—É–º–º–∞': 'üí∞ –°—É–º–º–∞ –ø–ª–∞—Ç–µ–∂–∞ (–¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å > 0).\n–í–∞–ª–∏–¥–∏—Ä—É–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.',
      '–°–ø–æ—Å–æ–±': 'üí≥ –°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:\n–°–ë–ü, –∫–∞—Ä—Ç–∞, –Ω–∞–ª–∏—á–Ω—ã–µ, –¥—Ä.',
      '–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π': 'üìù –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:\n–Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ, –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ –ø–ª–∞—Ç–µ–∂–∞.',
      'payment_id': 'üÜî –ê–≤—Ç–æ-ID –ø–ª–∞—Ç–µ–∂–∞ (PMT001, PMT002, ...).\n‚ö†Ô∏è –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ - –Ω–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ!'
    };
    setHeaderNotes_(sh, notes);
  })();

  // –£—á–∞—Å—Ç–∏–µ
  (function(){
    const sh = ss.getSheetByName('–£—á–∞—Å—Ç–∏–µ'); if (!sh) return;
    const notes = {
      'collection_id (label)': '–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –æ—Ç–∫—Ä—ã—Ç—ã–π —Å–±–æ—Ä –∏–∑ —Å–ø–∏—Å–∫–∞ ¬´–ù–∞–∑–≤–∞–Ω–∏–µ (ID)¬ª.',
      'family_id (label)': '–í—ã–±–µ—Ä–∏—Ç–µ –∞–∫—Ç–∏–≤–Ω—É—é —Å–µ–º—å—é –∏–∑ —Å–ø–∏—Å–∫–∞ ¬´–ò–º—è (ID)¬ª.',
      '–°—Ç–∞—Ç—É—Å': '–£—á–∞—Å—Ç–≤—É–µ—Ç ‚Äî –≤–∫–ª—é—á–∏—Ç—å; –ù–µ —É—á–∞—Å—Ç–≤—É–µ—Ç ‚Äî –∏—Å–∫–ª—é—á–∏—Ç—å. –ï—Å–ª–∏ –µ—Å—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω ¬´–£—á–∞—Å—Ç–≤—É–µ—Ç¬ª, —É—á–∞—Å—Ç–≤—É—é—Ç —Ç–æ–ª—å–∫–æ –æ—Ç–º–µ—á–µ–Ω–Ω—ã–µ.',
      '–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π': '–°–ø—Ä–∞–≤–æ—á–Ω—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ —É—á–∞—Å—Ç–∏—é.'
    };
    setHeaderNotes_(sh, notes);
  })();

  // –ë–∞–ª–∞–Ω—Å
  (function(){
    const sh = ss.getSheetByName('–ë–∞–ª–∞–Ω—Å'); if (!sh) return;
    const notes = {
      'family_id': 'ID —Å–µ–º—å–∏ –¥–ª—è —Å—Å—ã–ª–æ–∫ –∏ —Ñ–æ—Ä–º—É–ª.',
      '–ò–º—è —Ä–µ–±—ë–Ω–∫–∞': '–ê–≤—Ç–æ–ø–æ–¥—Ç—è–≥–∏–≤–∞–µ—Ç—Å—è –ø–æ ID –∏–∑ ¬´–°–µ–º—å–∏¬ª.',
  '–ü–µ—Ä–µ–ø–ª–∞—Ç–∞ (—Ç–µ–∫—É—â–∞—è)': 'MAX(0, –û–ø–ª–∞—á–µ–Ω–æ –≤—Å–µ–≥–æ ‚àí –ù–∞—á–∏—Å–ª–µ–Ω–æ –≤—Å–µ–≥–æ).',
      '–û–ø–ª–∞—á–µ–Ω–æ –≤—Å–µ–≥–æ': '–°—É–º–º–∞ –≤—Å–µ—Ö –ø–ª–∞—Ç–µ–∂–µ–π —Å–µ–º—å–∏ –ø–æ –≤—Å–µ–º —Å–±–æ—Ä–∞–º.',
  '–ù–∞—á–∏—Å–ª–µ–Ω–æ –≤—Å–µ–≥–æ': '–ò—Ç–æ–≥ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–π –ø–æ –≤—Å–µ–º —Å–±–æ—Ä–∞–º (–æ—Ç–∫—Ä—ã—Ç—ã–µ –∏ –∑–∞–∫—Ä—ã—Ç—ã–µ), —Å —É—á—ë—Ç–æ–º —É—á–∞—Å—Ç–∏—è –∏ —Ä–µ–∂–∏–º–∞.',
  '–ó–∞–¥–æ–ª–∂–µ–Ω–Ω–æ—Å—Ç—å': 'MAX(0, –ù–∞—á–∏—Å–ª–µ–Ω–æ –≤—Å–µ–≥–æ ‚àí –û–ø–ª–∞—á–µ–Ω–æ).'
    };
    setHeaderNotes_(sh, notes);
  })();

  // –î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è
  (function(){
    const sh = ss.getSheetByName('–î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è'); if (!sh) return;
    const notes = {
      'family_id': 'ID —Å–µ–º—å–∏. –°—Ç—Ä–æ–∫–∏ —Ñ–æ—Ä–º–∏—Ä—É—é—Ç—Å—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ –¥–ª—è –ø–∞—Ä —Å–µ–º—å—è‚Üî—Å–±–æ—Ä.',
      '–ò–º—è —Ä–µ–±—ë–Ω–∫–∞': '–ò–º—è –∏–∑ –ª–∏—Å—Ç–∞ ¬´–°–µ–º—å–∏¬ª.',
      'collection_id': 'ID —Å–±–æ—Ä–∞. –¢–æ–ª—å–∫–æ —Ç–µ, —á—Ç–æ –ø–æ–ø–∞–¥–∞—é—Ç –ø–æ–¥ —Ñ–∏–ª—å—Ç—Ä (K1).',
      '–ù–∞–∑–≤–∞–Ω–∏–µ —Å–±–æ—Ä–∞': '–ò–º—è –∏–∑ –ª–∏—Å—Ç–∞ ¬´–°–±–æ—Ä—ã¬ª.',
      '–û–ø–ª–∞—á–µ–Ω–æ': '–°—É–º–º–∞ –ø–ª–∞—Ç–µ–∂–µ–π —Å–µ–º—å–∏ –≤ —ç—Ç–æ—Ç —Å–±–æ—Ä.',
  '–ù–∞—á–∏—Å–ª–µ–Ω–æ': '–ù–∞—á–∏—Å–ª–µ–Ω–æ –ø–æ –ø—Ä–∞–≤–∏–ª–∞–º —Å–±–æ—Ä–∞ –∏ —É—á–∞—Å—Ç–∏—é: static ‚Äî —Ñ–∏–∫—Å, shared_total_all ‚Äî T/N, shared_total_by_payers ‚Äî T/K (—Ç–æ–ª—å–∫–æ –æ–ø–ª–∞—Ç–∏–≤—à–∏–º), dynamic ‚Äî min(P_i, x), proportional ‚Äî –ø—Ä–æ–ø–æ—Ä—Ü–∏–æ–Ω–∞–ª—å–Ω–æ –ø–ª–∞—Ç–µ–∂–∞–º –±–µ–∑ –¥–æ–ª–≥–æ–≤, unit_price_by_payers ‚Äî floor(P_i/x)*x (–ø–æ–ª–Ω—ã–µ –µ–¥–∏–Ω–∏—Ü—ã; x=¬´–§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π x¬ª).',
      '–†–∞–∑–Ω–æ—Å—Ç—å (¬±)': '–û–ø–ª–∞—á–µ–Ω–æ ‚àí –ù–∞—á–∏—Å–ª–µ–Ω–æ. –ü–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ ‚Äî –ø–µ—Ä–µ–ø–ª–∞—Ç–∞, –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ ‚Äî –Ω–µ–¥–æ–ø–ª–∞—Ç–∞.',
  '–†–µ–∂–∏–º': '–†–µ–∂–∏–º –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è: static_per_child | shared_total_all | shared_total_by_payers | dynamic_by_payers | proportional_by_payers | unit_price_by_payers.'
    };
    setHeaderNotes_(sh, notes);
  })();

  // –°–≤–æ–¥–∫–∞
  (function(){
    const sh = ss.getSheetByName('–°–≤–æ–¥–∫–∞'); if (!sh) return;
    const notes = {
      'collection_id': 'ID —Å–±–æ—Ä–∞.',
      '–ù–∞–∑–≤–∞–Ω–∏–µ —Å–±–æ—Ä–∞': '–ò–º—è –∏–∑ –ª–∏—Å—Ç–∞ ¬´–°–±–æ—Ä—ã¬ª.',
      '–†–µ–∂–∏–º': '–†–µ–∂–∏–º –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è —Å–±–æ—Ä–∞.',
  '–°—É–º–º–∞ —Ü–µ–ª–∏': '–î–ª—è shared_total_all/shared_total_by_payers/dynamic_by_payers/proportional_by_payers/unit_price_by_payers ‚Äî –∑–∞–¥–∞–Ω–Ω–∞—è —Ü–µ–ª—å T. –î–ª—è static_per_child ‚Äî N(—É—á–∞—Å—Ç–Ω–∏–∫–æ–≤) √ó —Å—Ç–∞–≤–∫–∞.',
      '–°–æ–±—Ä–∞–Ω–æ': '–°—É–º–º–∞ –ø–ª–∞—Ç–µ–∂–µ–π –ø–æ —Å–±–æ—Ä—É –æ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ (Œ£ –ø–ª–∞—Ç–µ–∂–µ–π).',
      '–£—á–∞—Å—Ç–Ω–∏–∫–æ–≤': '–ß–∏—Å–ª–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Å–±–æ—Ä–∞ (–ø–æ –ø—Ä–∞–≤–∏–ª–∞–º ¬´–£—á–∞—Å—Ç–∏–µ¬ª –∏ ¬´–ê–∫—Ç–∏–≤–µ–Ω¬ª).',
  '–ü–ª–∞—Ç–µ–ª—å—â–∏–∫–æ–≤': '–ß–∏—Å–ª–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–ª–∞—Ç–µ–ª—å—â–∏–∫–æ–≤ (K). –î–ª—è unit_price_by_payers —á–∏—Å–ª–æ –µ–¥–∏–Ω–∏—Ü —Å–º–æ—Ç—Ä–∏—Ç–µ –≤ ¬´–ï–¥–∏–Ω–∏—Ü –æ–ø–ª–∞—á–µ–Ω–æ¬ª.',
  '–ï–¥–∏–Ω–∏—Ü –æ–ø–ª–∞—á–µ–Ω–æ': '–¢–æ–ª—å–∫–æ –¥–ª—è unit_price_by_payers: ‚åä–°–æ–±—Ä–∞–Ω–æ/x‚åã (x = ¬´–§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π x¬ª). –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç, —Å–∫–æ–ª—å–∫–æ —à—Ç—É–∫ —É–∂–µ –ø—Ä–æ—Ñ–∏–Ω–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–æ.',
  '–ï—â—ë –ø–ª–∞—Ç–µ–ª—å—â–∏–∫–æ–≤ –¥–æ –∑–∞–∫—Ä—ã—Ç–∏—è': '–û—Ü–µ–Ω–∫–∞ –ø–æ —Ä–µ–∂–∏–º—É:\n‚Ä¢ static_per_child: ceil(–û—Å—Ç–∞—Ç–æ–∫/—Å—Ç–∞–≤–∫–∞)\n‚Ä¢ shared_total_all: ceil(–û—Å—Ç–∞—Ç–æ–∫/(T/N))\n‚Ä¢ shared_total_by_payers: ceil(–û—Å—Ç–∞—Ç–æ–∫/–¥–æ–ª—è), –¥–æ–ª—è‚âàT/K (–∏–ª–∏ —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π x)\n‚Ä¢ dynamic_by_payers: ceil(–û—Å—Ç–∞—Ç–æ–∫/x) –ø—Ä–∏ –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–º x; –∏–Ω–∞—á–µ –ø—É—Å—Ç–æ\n‚Ä¢ proportional_by_payers: ‚Äî (–Ω–µ –ø—Ä–∏–º–µ–Ω—è–µ—Ç—Å—è)\n‚Ä¢ unit_price_by_payers: ceil(–û—Å—Ç–∞—Ç–æ–∫/x), –≥–¥–µ x=¬´–§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π x¬ª',
      '–û—Å—Ç–∞—Ç–æ–∫ –¥–æ —Ü–µ–ª–∏': 'MAX(0, –°—É–º–º–∞ —Ü–µ–ª–∏ ‚àí –°–æ–±—Ä–∞–Ω–æ).'
    };
    setHeaderNotes_(sh, notes);
  })();
}

/**
 * Ensures header notes are applied. Safe wrapper used on onOpen.
 * If addHeaderNotes_ throws (e.g., missing sheets), we swallow the error.
 */
function setupHeaderNotes_() {
  try {
    addHeaderNotes_();
  } catch (e) {
    // no-op: notes are optional and shouldn't block UI
  }
}



/** Assigns notes to headers by header text */
function setHeaderNotes_(sh, byHeader) {
  const map = getHeaderMap_(sh);
  Object.keys(byHeader).forEach(h => {
    const col = map[h];
    if (!col) return;
    sh.getRange(1, col).setNote(String(byHeader[h]||''));
  });
}

function styleSheetHeader_(sh) {
  const lastCol = sh.getLastColumn();
  if (lastCol < 1) return;
  const header = sh.getRange(1,1,1,lastCol);
  header.setBackground('#f1f3f4').setFontWeight('bold').setHorizontalAlignment('center').setVerticalAlignment('middle').setWrapStrategy(SpreadsheetApp.WrapStrategy.WRAP);
  try { sh.setRowHeights(1, 1, 28); } catch(_) {}
  // Banding for data rows (start from row 2 to keep header style)
  const lastRow = sh.getLastRow();
  if (lastRow >= 2) {
  const dataRange = sh.getRange(2,1,lastRow-1,lastCol);
  // Remove existing bandings to avoid fragmentation and re-apply zebra
  try { (sh.getBandings() || []).forEach(b => b.remove()); } catch(_) {}
  try { dataRange.applyRowBanding(SpreadsheetApp.BandingTheme.LIGHT_GREY).setHeaderRowColor(null); } catch(_) {}
  }
  // Create filter on data range
  try { sh.getFilter() && sh.getFilter().remove(); } catch(_) {}
  try { if (sh.getLastRow() >= 1 && lastCol >= 1) sh.getRange(1,1,Math.max(1, sh.getLastRow()), lastCol).createFilter(); } catch(_) {}
}

function styleBalanceSheet_(sh) {
  sh.setFrozenColumns(2);
  const lastRow = Math.max(sh.getLastRow(), 2);
  const lastCol = sh.getLastColumn();
  // Number formats
  if (lastRow >= 2) {
    // C:F numbers
    sh.getRange(2,3,lastRow-1,4).setNumberFormat('#,##0.00');
  }
  // Conditional formatting: C>0 green, F>0 red
  const rules = sh.getConditionalFormatRules();
  const rngC = sh.getRange(2,3,lastRow-1,1);
  const rngF = sh.getRange(2,6,lastRow-1,1);
  rules.push(
    SpreadsheetApp.newConditionalFormatRule().whenNumberGreaterThan(0).setBackground('#e6f4ea').setRanges([rngC]).build()
  );
  rules.push(
    SpreadsheetApp.newConditionalFormatRule().whenNumberGreaterThan(0).setBackground('#fce8e6').setRanges([rngF]).build()
  );
  sh.setConditionalFormatRules(rules);
  // Align columns: IDs center, names left, numbers right
  if (lastRow >= 1 && lastCol >= 2) {
    sh.getRange(2,1,lastRow-1,1).setHorizontalAlignment('center');
    sh.getRange(2,2,lastRow-1,1).setHorizontalAlignment('left');
    sh.getRange(2,3,lastRow-1,4).setHorizontalAlignment('right');
  }
}

function stylePaymentsSheet_(sh) {
  sh.setFrozenColumns(2);
  const map = getHeaderMap_(sh);
  const lastRow = Math.max(sh.getLastRow(), 2);
  const lastCol = sh.getLastColumn();
  // Date format
  if (map['–î–∞—Ç–∞']) sh.getRange(2, map['–î–∞—Ç–∞'], lastRow-1, 1).setNumberFormat('yyyy-mm-dd');
  // Amount format
  if (map['–°—É–º–º–∞']) sh.getRange(2, map['–°—É–º–º–∞'], lastRow-1, 1).setNumberFormat('#,##0.00').setHorizontalAlignment('right');
  // Align ID center
  if (map['payment_id']) sh.getRange(2, map['payment_id'], lastRow-1, 1).setHorizontalAlignment('center');
}

function styleCollectionsSheet_(sh) {
  sh.setFrozenColumns(2);
  const map = getHeaderMap_(sh);
  const lastRow = Math.max(sh.getLastRow(), 2);
  // Currency-like numbers
  if (map['–ü–∞—Ä–∞–º–µ—Ç—Ä —Å—É–º–º—ã']) sh.getRange(2, map['–ü–∞—Ä–∞–º–µ—Ç—Ä —Å—É–º–º—ã'], lastRow-1, 1).setNumberFormat('#,##0.00').setHorizontalAlignment('right');
  if (map['–§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π x']) sh.getRange(2, map['–§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π x'], lastRow-1, 1).setNumberFormat('#,##0.00').setHorizontalAlignment('right');
  // Dates
  if (map['–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞']) sh.getRange(2, map['–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞'], lastRow-1, 1).setNumberFormat('yyyy-mm-dd');
  if (map['–î–µ–¥–ª–∞–π–Ω'])     sh.getRange(2, map['–î–µ–¥–ª–∞–π–Ω'], lastRow-1, 1).setNumberFormat('yyyy-mm-dd');
  // ID center
  if (map['collection_id']) sh.getRange(2, map['collection_id'], lastRow-1, 1).setHorizontalAlignment('center');
  // Conditional formatting for –°—Ç–∞—Ç—É—Å
  if (map['–°—Ç–∞—Ç—É—Å'] && lastRow > 1) {
    const rules = sh.getConditionalFormatRules();
    const rng = sh.getRange(2, map['–°—Ç–∞—Ç—É—Å'], lastRow-1, 1);
    rules.push(SpreadsheetApp.newConditionalFormatRule().whenTextEqualTo('–û—Ç–∫—Ä—ã—Ç').setBackground('#e6f4ea').setRanges([rng]).build());
    rules.push(SpreadsheetApp.newConditionalFormatRule().whenTextEqualTo('–ó–∞–∫—Ä—ã—Ç').setBackground('#eeeeee').setRanges([rng]).build());
    sh.setConditionalFormatRules(rules);
  }
  // Align procurement fields
  if (map['–í–æ–∑–º–µ—â–µ–Ω–æ']) sh.getRange(2, map['–í–æ–∑–º–µ—â–µ–Ω–æ'], lastRow-1, 1).setHorizontalAlignment('center');
  if (map['–ó–∞–∫—É–ø–∫–∞ –∏–∑ —Å—Ä–µ–¥—Å—Ç–≤']) sh.getRange(2, map['–ó–∞–∫—É–ø–∫–∞ –∏–∑ —Å—Ä–µ–¥—Å—Ç–≤'], lastRow-1, 1).setWrapStrategy(SpreadsheetApp.WrapStrategy.WRAP);
}

function styleFamiliesSheet_(sh) {
  sh.setFrozenColumns(1);
  const map = getHeaderMap_(sh);
  const lastRow = Math.max(sh.getLastRow(), 2);
  if (map['–î–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è']) sh.getRange(2, map['–î–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è'], lastRow-1, 1).setNumberFormat('yyyy-mm-dd');
  if (map['–ê–∫—Ç–∏–≤–µ–Ω']) sh.getRange(2, map['–ê–∫—Ç–∏–≤–µ–Ω'], lastRow-1, 1).setHorizontalAlignment('center');
  if (map['family_id']) sh.getRange(2, map['family_id'], lastRow-1, 1).setHorizontalAlignment('center');
  // Conditional formatting for –ê–∫—Ç–∏–≤–µ–Ω
  if (map['–ê–∫—Ç–∏–≤–µ–Ω'] && lastRow > 1) {
    const rules = sh.getConditionalFormatRules();
    const rng = sh.getRange(2, map['–ê–∫—Ç–∏–≤–µ–Ω'], lastRow-1, 1);
    rules.push(SpreadsheetApp.newConditionalFormatRule().whenTextEqualTo('–î–∞').setBackground('#e6f4ea').setRanges([rng]).build());
    rules.push(SpreadsheetApp.newConditionalFormatRule().whenTextEqualTo('–ù–µ—Ç').setBackground('#fce8e6').setRanges([rng]).build());
    sh.setConditionalFormatRules(rules);
  }
}

function styleParticipationSheet_(sh) {
  const map = getHeaderMap_(sh);
  const lastRow = Math.max(sh.getLastRow(), 2);
  if (map['–°—Ç–∞—Ç—É—Å']) sh.getRange(2, map['–°—Ç–∞—Ç—É—Å'], lastRow-1, 1).setHorizontalAlignment('center');
  // Conditional formatting for —É—á–∞—Å—Ç–∏–µ
  if (map['–°—Ç–∞—Ç—É—Å'] && lastRow > 1) {
    const rules = sh.getConditionalFormatRules();
    const rng = sh.getRange(2, map['–°—Ç–∞—Ç—É—Å'], lastRow-1, 1);
    rules.push(SpreadsheetApp.newConditionalFormatRule().whenTextEqualTo('–£—á–∞—Å—Ç–≤—É–µ—Ç').setBackground('#e6f4ea').setRanges([rng]).build());
    rules.push(SpreadsheetApp.newConditionalFormatRule().whenTextEqualTo('–ù–µ —É—á–∞—Å—Ç–≤—É–µ—Ç').setBackground('#eeeeee').setRanges([rng]).build());
    sh.setConditionalFormatRules(rules);
  }
}

function styleDetailSheet_(sh) {
  sh.setFrozenColumns(2);
  const map = getHeaderMap_(sh);
  const lastRow = Math.max(sh.getLastRow(), 2);
  // Number formats
  if (map['–û–ø–ª–∞—á–µ–Ω–æ']) sh.getRange(2, map['–û–ø–ª–∞—á–µ–Ω–æ'], lastRow-1, 1).setNumberFormat('#,##0.00').setHorizontalAlignment('right');
  if (map['–ù–∞—á–∏—Å–ª–µ–Ω–æ']) sh.getRange(2, map['–ù–∞—á–∏—Å–ª–µ–Ω–æ'], lastRow-1, 1).setNumberFormat('#,##0.00').setHorizontalAlignment('right');
  if (map['–†–∞–∑–Ω–æ—Å—Ç—å (¬±)']) sh.getRange(2, map['–†–∞–∑–Ω–æ—Å—Ç—å (¬±)'], lastRow-1, 1).setNumberFormat('#,##0.00').setHorizontalAlignment('right');
  // IDs center
  if (map['family_id']) sh.getRange(2, map['family_id'], lastRow-1, 1).setHorizontalAlignment('center');
  if (map['collection_id']) sh.getRange(2, map['collection_id'], lastRow-1, 1).setHorizontalAlignment('center');
  // Conditional formatting for difference: positive green, negative red
  if (map['–†–∞–∑–Ω–æ—Å—Ç—å (¬±)'] && lastRow > 1) {
    const rules = sh.getConditionalFormatRules();
    const rng = sh.getRange(2, map['–†–∞–∑–Ω–æ—Å—Ç—å (¬±)'], lastRow-1, 1);
    rules.push(SpreadsheetApp.newConditionalFormatRule().whenNumberGreaterThan(0).setBackground('#e6f4ea').setRanges([rng]).build());
    rules.push(SpreadsheetApp.newConditionalFormatRule().whenNumberLessThan(0).setBackground('#fce8e6').setRanges([rng]).build());
    sh.setConditionalFormatRules(rules);
  }
}

function styleSummarySheet_(sh) {
  sh.setFrozenColumns(2);
  const map = getHeaderMap_(sh);
  const lastRow = Math.max(sh.getLastRow(), 2);
  // Number formats
  ['–°—É–º–º–∞ —Ü–µ–ª–∏','–°–æ–±—Ä–∞–Ω–æ','–û—Å—Ç–∞—Ç–æ–∫ –¥–æ —Ü–µ–ª–∏'].forEach(h => { if (map[h]) sh.getRange(2, map[h], lastRow-1, 1).setNumberFormat('#,##0.00').setHorizontalAlignment('right'); });
  ['–£—á–∞—Å—Ç–Ω–∏–∫–æ–≤','–ü–ª–∞—Ç–µ–ª—å—â–∏–∫–æ–≤','–ï–¥–∏–Ω–∏—Ü –æ–ø–ª–∞—á–µ–Ω–æ','–ï—â—ë –ø–ª–∞—Ç–µ–ª—å—â–∏–∫–æ–≤ –¥–æ –∑–∞–∫—Ä—ã—Ç–∏—è'].forEach(h => { if (map[h]) sh.getRange(2, map[h], lastRow-1, 1).setNumberFormat('0').setHorizontalAlignment('center'); });
  if (map['collection_id']) sh.getRange(2, map['collection_id'], lastRow-1, 1).setHorizontalAlignment('center');
  // Conditional formatting for –û—Å—Ç–∞—Ç–æ–∫ > 0
  if (map['–û—Å—Ç–∞—Ç–æ–∫ –¥–æ —Ü–µ–ª–∏'] && lastRow > 1) {
    const rules = sh.getConditionalFormatRules();
    const rng = sh.getRange(2, map['–û—Å—Ç–∞—Ç–æ–∫ –¥–æ —Ü–µ–ª–∏'], lastRow-1, 1);
    rules.push(SpreadsheetApp.newConditionalFormatRule().whenNumberGreaterThan(0).setBackground('#fff4e5').setRanges([rng]).build());
    // NeedMore: 0 = green, >0 = orange
    if (map['–ï—â—ë –ø–ª–∞—Ç–µ–ª—å—â–∏–∫–æ–≤ –¥–æ –∑–∞–∫—Ä—ã—Ç–∏—è']) {
      const rng2 = sh.getRange(2, map['–ï—â—ë –ø–ª–∞—Ç–µ–ª—å—â–∏–∫–æ–≤ –¥–æ –∑–∞–∫—Ä—ã—Ç–∏—è'], lastRow-1, 1);
      rules.push(SpreadsheetApp.newConditionalFormatRule().whenNumberEqualTo(0).setBackground('#e6f4ea').setRanges([rng2]).build());
      rules.push(SpreadsheetApp.newConditionalFormatRule().whenNumberGreaterThan(0).setBackground('#fff4e5').setRanges([rng2]).build());
    }
    // Section header shading when ALL: detect by text in "–ù–∞–∑–≤–∞–Ω–∏–µ —Å–±–æ—Ä–∞"
    if (map['–ù–∞–∑–≤–∞–Ω–∏–µ —Å–±–æ—Ä–∞']) {
      const nameColRng = sh.getRange(2, map['–ù–∞–∑–≤–∞–Ω–∏–µ —Å–±–æ—Ä–∞'], lastRow-1, 1);
      rules.push(SpreadsheetApp.newConditionalFormatRule().whenTextContains('–û–¢–ö–†–´–¢–´–ï –°–ë–û–†–´').setBackground('#e8f0fe').setRanges([nameColRng]).build());
      rules.push(SpreadsheetApp.newConditionalFormatRule().whenTextContains('–ó–ê–ö–†–´–¢–´–ï –°–ë–û–†–´').setBackground('#e8f0fe').setRanges([nameColRng]).build());
    }
    sh.setConditionalFormatRules(rules);
  }
}

function getSheetsSpec() {
  return [
    {
      name: '–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è',
      headers: ['–®–∞–≥', '–û–ø–∏—Å–∞–Ω–∏–µ'],
      colWidths: [80, 1000]
    },
    {
      name: '–°–µ–º—å–∏',
      headers: [
        '–†–µ–±—ë–Ω–æ–∫ –§–ò–û','–î–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è',
        '–ú–∞–º–∞ –§–ò–û','–ú–∞–º–∞ —Ç–µ–ª–µ—Ñ–æ–Ω','–ú–∞–º–∞ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã','–ú–∞–º–∞ —Ç–µ–ª–µ–≥—Ä–∞–º',
        '–ü–∞–ø–∞ –§–ò–û','–ü–∞–ø–∞ —Ç–µ–ª–µ—Ñ–æ–Ω','–ü–∞–ø–∞ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã','–ü–∞–ø–∞ —Ç–µ–ª–µ–≥—Ä–∞–º',
        '–ê–∫—Ç–∏–≤–µ–Ω','–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π',
        'family_id'              // ID –≤ –∫–æ–Ω—Ü–µ: F001...
      ],
      colWidths: [220,110,220,140,240,160,220,140,240,160,90,260,110],
      dateCols: [2]
    },
    {
      name: '–°–±–æ—Ä—ã',
      headers: [
        '–ù–∞–∑–≤–∞–Ω–∏–µ —Å–±–æ—Ä–∞','–°—Ç–∞—Ç—É—Å',
        '–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞','–î–µ–¥–ª–∞–π–Ω',
        '–ù–∞—á–∏—Å–ª–µ–Ω–∏–µ','–ü–∞—Ä–∞–º–µ—Ç—Ä —Å—É–º–º—ã','–§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π x',
        '–ó–∞–∫—É–ø–∫–∞ –∏–∑ —Å—Ä–µ–¥—Å—Ç–≤','–í–æ–∑–º–µ—â–µ–Ω–æ',
        '–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π',
        'collection_id','–°—Å—ã–ª–∫–∞ –Ω–∞ –≥—É–≥–ª–¥–∏—Å–∫'
      ],
  // –ù–∞—á–∏—Å–ª–µ–Ω–∏–µ: static_per_child | shared_total_all | shared_total_by_payers | dynamic_by_payers | proportional_by_payers | unit_price_by_payers
      colWidths: [260,120,110,110,220,150,140,200,110,260,120,300],
      dateCols: [3,4]
    },
    {
      name: '–£—á–∞—Å—Ç–∏–µ',
      headers: ['collection_id (label)','family_id (label)','–°—Ç–∞—Ç—É—Å','–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π'],
      colWidths: [260,260,120,260]
    },
    {
      name: '–ü–ª–∞—Ç–µ–∂–∏',
      headers: [
        '–î–∞—Ç–∞','family_id (label)','collection_id (label)',
        '–°—É–º–º–∞','–°–ø–æ—Å–æ–±','–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π','payment_id'
      ],
      colWidths: [110,260,260,110,110,260,120],
      dateCols: [1]
    },
    {
      name: '–ë–∞–ª–∞–Ω—Å',
      headers: [
  'family_id','–ò–º—è —Ä–µ–±—ë–Ω–∫–∞',
  '–ü–µ—Ä–µ–ø–ª–∞—Ç–∞ (—Ç–µ–∫—É—â–∞—è)','–û–ø–ª–∞—á–µ–Ω–æ –≤—Å–µ–≥–æ','–ù–∞—á–∏—Å–ª–µ–Ω–æ –≤—Å–µ–≥–æ','–ó–∞–¥–æ–ª–∂–µ–Ω–Ω–æ—Å—Ç—å'
      ],
      colWidths: [120,260,140,140,120,130]
    },
    {
      name: '–î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è',
      headers: [
        'family_id','–ò–º—è —Ä–µ–±—ë–Ω–∫–∞','collection_id','–ù–∞–∑–≤–∞–Ω–∏–µ —Å–±–æ—Ä–∞',
        '–û–ø–ª–∞—á–µ–Ω–æ','–ù–∞—á–∏—Å–ª–µ–Ω–æ','–†–∞–∑–Ω–æ—Å—Ç—å (¬±)','–†–µ–∂–∏–º'
      ],
      colWidths: [120,200,120,200,120,120,120,150]
    },
    {
      name: '–°–≤–æ–¥–∫–∞',
      headers: [
        'collection_id','–ù–∞–∑–≤–∞–Ω–∏–µ —Å–±–æ—Ä–∞','–†–µ–∂–∏–º','–°—É–º–º–∞ —Ü–µ–ª–∏','–°–æ–±—Ä–∞–Ω–æ','–£—á–∞—Å—Ç–Ω–∏–∫–æ–≤','–ü–ª–∞—Ç–µ–ª—å—â–∏–∫–æ–≤','–ï–¥–∏–Ω–∏—Ü –æ–ø–ª–∞—á–µ–Ω–æ','–ï—â—ë –ø–ª–∞—Ç–µ–ª—å—â–∏–∫–æ–≤ –¥–æ –∑–∞–∫—Ä—ã—Ç–∏—è','–û—Å—Ç–∞—Ç–æ–∫ –¥–æ —Ü–µ–ª–∏'
      ],
      colWidths: [120,260,180,140,140,120,150,150,220,150]
    },
    {
      name: 'Lists', // hidden
      headers: [
        'OPEN_COLLECTIONS','', // A
        'COLLECTIONS','',      // C
        'ACTIVE_FAMILIES','',  // E
        'FAMILIES',''          // G
      ],
      colWidths: [260,40,260,40,260,40,260,40]
    }
  ];
}

function getOrCreateSheet(ss, name) {
  let sh = ss.getSheetByName(name);
  if (!sh) sh = ss.insertSheet(name);
  return sh;
}

function setupInstructionSheet() {
  const sh = SpreadsheetApp.getActive().getSheetByName('–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è');
  // Clear old content under header
  const last = sh.getLastRow();
  if (last > 1) sh.getRange(2,1,last-1, Math.max(2, sh.getLastColumn())).clearContent();

  const rows = [
    ['‚ñ∂ –û –ø—Ä–æ–µ–∫—Ç–µ', '–í–µ—Ä—Å–∏—è: 0.1. –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π: https://github.com/yobushka/paymentAccountingGoogleSheet'],
    ['‚ñ∂ –î–∏—Å–∫–ª–µ–π–º–µ—Ä', '–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –Ω–∞ —Ä–∞–Ω–Ω–µ–π —Å—Ç–∞–¥–∏–∏ –∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –ª–∏—á–Ω—ã—Ö —Ü–µ–ª–µ–π; welcome to contribute. –í–Ω–∏–º–∞–Ω–∏–µ –∫ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–º –¥–∞–Ω–Ω—ã–º: –ø–µ—Ä–µ–¥–∞—á–∞ –ü–î–Ω —á–µ—Ä–µ–∑ –≥—Ä–∞–Ω–∏—Ü—É –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ–∑–∞–∫–æ–Ω–Ω–æ–π. Google ‚Äî –∏–Ω–æ—Å—Ç—Ä–∞–Ω–Ω–∞—è –∫–æ–º–ø–∞–Ω–∏—è; —Å–æ–±–ª—é–¥–∞–π—Ç–µ –ø—Ä–∏–º–µ–Ω–∏–º–æ–µ –∑–∞–∫–æ–Ω–æ–¥–∞—Ç–µ–ª—å—Å—Ç–≤–æ.'],
    ['‚ñ∂ –ë—ã—Å—Ç—Ä—ã–π —Å—Ç–∞—Ä—Ç', '1) Funds ‚Üí Setup / Rebuild structure.\n2) –ó–∞–ø–æ–ª–Ω–∏—Ç–µ ¬´–°–µ–º—å–∏¬ª (–ê–∫—Ç–∏–≤–µ–Ω=–î–∞).\n3) –î–æ–±–∞–≤—å—Ç–µ ¬´–°–±–æ—Ä—ã¬ª (–°—Ç–∞—Ç—É—Å=–û—Ç–∫—Ä—ã—Ç).\n4) –ü—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ ¬´–£—á–∞—Å—Ç–∏–µ¬ª.\n5) –í–Ω–æ—Å–∏—Ç–µ ¬´–ü–ª–∞—Ç–µ–∂–∏¬ª.\n6) –°–º–æ—Ç—Ä–∏—Ç–µ ¬´–ë–∞–ª–∞–Ω—Å¬ª –∏ ¬´–î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è¬ª.\n7) ¬´–°–≤–æ–¥–∫–∞¬ª ‚Äî –æ–ø–µ—Ä–∞—Ç–∏–≤–Ω—ã–µ –∏—Ç–æ–≥–∏ –ø–æ —Å–±–æ—Ä–∞–º.'],
  ['1', '–°–µ–º—å–∏: –æ–¥–Ω–∞ —Å—Ç—Ä–æ–∫–∞ = –æ–¥–Ω–∞ —Å–µ–º—å—è (–æ–¥–∏–Ω —Ä–µ–±—ë–Ω–æ–∫). –ó–∞–ø–æ–ª–Ω–∏—Ç–µ –§–ò–û, –î–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è (yyyy-mm-dd), –¢–µ–ª–µ–≥—Ä–∞–º –º–∞–º—ã/–ø–∞–ø—ã –∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã —Ä–æ–¥–∏—Ç–µ–ª–µ–π. –ü–æ—Å—Ç–∞–≤—å—Ç–µ ¬´–ê–∫—Ç–∏–≤–µ–Ω=–î–∞¬ª, —á—Ç–æ–±—ã —Å–µ–º—å—è —É—á–∞—Å—Ç–≤–æ–≤–∞–ª–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é. ID –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏ –Ω–∞—á–∞–ª–µ –≤–≤–æ–¥–∞ –∏–ª–∏ —á–µ—Ä–µ–∑ –º–µ–Ω—é Generate IDs.'],
  ['2', '–°–±–æ—Ä—ã: –≤—ã–±–µ—Ä–∏—Ç–µ ¬´–ù–∞—á–∏—Å–ª–µ–Ω–∏–µ¬ª –∏ –∑–∞–¥–∞–π—Ç–µ ¬´–ü–∞—Ä–∞–º–µ—Ç—Ä —Å—É–º–º—ã¬ª (—Å—Ç–∞–≤–∫–∞/—Ü–µ–ª—å). ¬´–§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π x¬ª: –¥–ª—è dynamic_by_payers ‚Äî cap –ø–æ—Å–ª–µ –∑–∞–∫—Ä—ã—Ç–∏—è, –¥–ª—è unit_price_by_payers ‚Äî —Ü–µ–Ω–∞ –∑–∞ –µ–¥–∏–Ω–∏—Ü—É. –ú–æ–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å ¬´–°—Å—ã–ª–∫–∞ –Ω–∞ –≥—É–≥–ª–¥–∏—Å–∫¬ª. –°—Ç–∞—Ç—É—Å=–û—Ç–∫—Ä—ã—Ç ‚Äî —É—á–∞—Å—Ç–≤—É–µ—Ç –≤ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è—Ö.'],
  ['2.1', '–ó–∞–∫—É–ø–∫–∞ –∏–∑ —Å—Ä–µ–¥—Å—Ç–≤ / –í–æ–∑–º–µ—â–µ–Ω–æ: –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ —Ñ–∏–∫—Å–∏—Ä—É–π—Ç–µ –∑–∞–∫—É–ø–∫—É –∏–∑ —Å–æ–±—Ä–∞–Ω–Ω—ã—Ö —Å—Ä–µ–¥—Å—Ç–≤ –∏ –æ—Ç–º–µ—á–∞–π—Ç–µ, –≤–æ–∑–º–µ—â–µ–Ω–∞ –ª–∏ —Å—É–º–º–∞. –ü–æ–ª—è —Å–ø—Ä–∞–≤–æ—á–Ω—ã–µ.'],
    ['3', '–£—á–∞—Å—Ç–∏–µ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ): –µ—Å–ª–∏ –µ—Å—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω ¬´–£—á–∞—Å—Ç–≤—É–µ—Ç¬ª, —É—á–∞—Å—Ç–≤—É—é—Ç —Ç–æ–ª—å–∫–æ –æ—Ç–º–µ—á–µ–Ω–Ω—ã–µ —Å–µ–º—å–∏. ¬´–ù–µ —É—á–∞—Å—Ç–≤—É–µ—Ç¬ª –≤—Å–µ–≥–¥–∞ –∏—Å–∫–ª—é—á–∞–µ—Ç —Å–µ–º—å—é. –ï—Å–ª–∏ —è–≤–Ω—ã—Ö ¬´–£—á–∞—Å—Ç–≤—É–µ—Ç¬ª –Ω–µ—Ç ‚Äî —É—á–∞—Å—Ç–≤—É—é—Ç –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–µ–º—å–∏.'],
    ['4', '–ü–ª–∞—Ç–µ–∂–∏: –≤—ã–±–µ—Ä–∏—Ç–µ —Å–µ–º—å—é –∏ —Å–±–æ—Ä –∏–∑ –≤—ã–ø–∞–¥–∞—é—â–∏—Ö —Å–ø–∏—Å–∫–æ–≤ ¬´–ù–∞–∑–≤–∞–Ω–∏–µ (ID)¬ª. –°—É–º–º–∞ –ø–ª–∞—Ç–µ–∂–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å > 0 (–≤–∞–ª–∏–¥–∏—Ä—É–µ—Ç—Å—è). –î–∞—Ç–∞ ‚Äî —Å–ø—Ä–∞–≤–æ—á–Ω–∞—è –∏ –Ω–∞ —Ä–∞—Å—á—ë—Ç—ã –Ω–µ –≤–ª–∏—è–µ—Ç.'],
  ['5', '–ë–∞–ª–∞–Ω—Å: –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –ø–æ –∫–∞–∂–¥–æ–π —Å–µ–º—å–µ ¬´–û–ø–ª–∞—á–µ–Ω–æ –≤—Å–µ–≥–æ¬ª, ¬´–ù–∞—á–∏—Å–ª–µ–Ω–æ –≤—Å–µ–≥–æ¬ª, ¬´–ü–µ—Ä–µ–ø–ª–∞—Ç–∞ (—Ç–µ–∫—É—â–∞—è)¬ª, ¬´–ó–∞–¥–æ–ª–∂–µ–Ω–Ω–æ—Å—Ç—å¬ª.'],
    ['6', '–î–µ–º–æ-–¥–∞–Ω–Ω—ã–µ: Funds ‚Üí Load Sample Data (separate) ‚Äî –¥–æ–±–∞–≤–∏—Ç –ø—Ä–∏–º–µ—Ä—ã —Å–µ–º–µ–π, —Å–±–æ—Ä–æ–≤, —É—á–∞—Å—Ç–∏—è –∏ –ø–ª–∞—Ç–µ–∂–µ–π, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –º–µ—Ö–∞–Ω–∏–∫—É —Å—Ä–∞–∑—É.'],

  ['‚ñ∂ –ü–µ—Ä–µ—Å—á—ë—Ç', '–ï—Å–ª–∏ —Å–º–µ–Ω–∏–ª–∏ —Ä–µ–∂–∏–º/—É—á–∞—Å—Ç–∏–µ/–ø–ª–∞—Ç–µ–∂–∏, –≤—ã–ø–æ–ª–Ω–∏—Ç–µ Funds ‚Üí Recalculate (Balance & Detail). –û–±–Ω–æ–≤—è—Ç—Å—è ¬´–ë–∞–ª–∞–Ω—Å¬ª, ¬´–î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è¬ª –∏ ¬´–°–≤–æ–¥–∫–∞¬ª. –ë–∞–ª–∞–Ω—Å —Ç–∞–∫–∂–µ –∞–≤—Ç–æ‚Äë–æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –ø—Ä–∏ –ø—Ä–∞–≤–∫–∞—Ö –Ω–∞ –ª–∏—Å—Ç–∞—Ö ¬´–ü–ª–∞—Ç–µ–∂–∏¬ª, ¬´–°–µ–º—å–∏¬ª, ¬´–°–±–æ—Ä—ã¬ª.'],

    ['‚ñ∂ –†–µ–∂–∏–º—ã –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è (–ø–æ–¥—Ä–æ–±–Ω–æ)', '–í—Å–µ —Ä–∞—Å—á—ë—Ç—ã –º–æ–º–µ–Ω—Ç–∞–ª—å–Ω—ã–µ; –ø–æ–≤–µ–¥–µ–Ω–∏–µ –ø—Ä–∏ 1/–Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –ø–ª–∞—Ç–µ–ª—å—â–∏–∫–∞—Ö:'],
    ['static_per_child', '–§–∏–∫—Å –Ω–∞ —Å–µ–º—å—é. –ù–∞—á–∏—Å–ª–µ–Ω–æ —É—á–∞—Å—Ç–Ω–∏–∫—É = ¬´–ü–∞—Ä–∞–º–µ—Ç—Ä —Å—É–º–º—ã¬ª.\n1 –ø–ª–∞—Ç–µ–ª—å—â–∏–∫: –≤—Å–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω–∞ —Å—Ç–∞–≤–∫–∞; —É –ø–ª–∞—Ç–µ–ª—å—â–∏–∫–∞ –≤–æ–∑–º–æ–∂–Ω–∞ –ø–µ—Ä–µ–ø–ª–∞—Ç–∞.\n–ù–µ—Å–∫–æ–ª—å–∫–æ –ø–ª–∞—Ç–µ–ª—å—â–∏–∫–æ–≤: –Ω–∞—á–∏—Å–ª–µ–Ω–∏–µ –æ–¥–∏–Ω–∞–∫–æ–≤–æ —É –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤.'],
    ['shared_total_all', 'T/N –Ω–∞ –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤.\n1 –ø–ª–∞—Ç–µ–ª—å—â–∏–∫: –≤—Å–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω–æ T/N; —É –ø–ª–∞—Ç–µ–ª—å—â–∏–∫–∞ –≤–æ–∑–º–æ–∂–Ω–∞ –≤—Ä–µ–º–µ–Ω–Ω–∞—è –ø–µ—Ä–µ–ø–ª–∞—Ç–∞.\n–ù–µ—Å–∫–æ–ª—å–∫–æ –ø–ª–∞—Ç–µ–ª—å—â–∏–∫–æ–≤: —É –≤—Å–µ—Ö –æ–¥–∏–Ω–∞–∫–æ–≤–æ–µ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–µ = T/N.'],
    ['shared_total_by_payers', 'T/K —Ç–æ–ª—å–∫–æ –¥–ª—è –æ–ø–ª–∞—Ç–∏–≤—à–∏—Ö.\n1 –ø–ª–∞—Ç–µ–ª—å—â–∏–∫: –Ω–∞—á–∏—Å–ª–µ–Ω–∏–µ = T (K=1); –±—É–¥–µ—Ç –Ω–µ–¥–æ–ø–ª–∞—Ç–∞, –µ—Å–ª–∏ –≤–Ω–µ—Å–µ–Ω–æ < T.\n–ù–µ—Å–∫–æ–ª—å–∫–æ –ø–ª–∞—Ç–µ–ª—å—â–∏–∫–æ–≤: –∫–∞–∂–¥–æ–º—É –ø–ª–∞—Ç–∏–≤—à–µ–º—É –Ω–∞—á–∏—Å–ª–µ–Ω–æ T/K; –Ω–µ –ø–ª–∞—Ç–∏–≤—à–∏–µ = 0.'],
    ['dynamic_by_payers', 'Water‚Äëfilling: Œ£ min(P_i, x) = min(T, Œ£P_i). –ù–∞—á–∏—Å–ª–µ–Ω–æ —Å–µ–º—å–µ i = min(P_i, x).\n1 –ø–ª–∞—Ç–µ–ª—å—â–∏–∫: –Ω–∞—á–∏—Å–ª–µ–Ω–∏–µ = –µ–≥–æ –ø–ª–∞—Ç—ë–∂ (–¥–æ T), –¥–æ–ª–≥ –Ω–µ —Ä–∞—Å—Ç—ë—Ç.\n–ù–µ—Å–∫–æ–ª—å–∫–æ –ø–ª–∞—Ç–µ–ª—å—â–∏–∫–æ–≤: x –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç —Ä–∞–Ω–Ω–∏–µ –ø–µ—Ä–µ–ø–ª–∞—Ç—ã; –ø–æ—Å–ª–µ –∑–∞–∫—Ä—ã—Ç–∏—è –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è ¬´–§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π x¬ª.'],
  ['proportional_by_payers', '–ü—Ä–æ–ø–æ—Ä—Ü–∏–æ–Ω–∞–ª—å–Ω–æ –ø–ª–∞—Ç–µ–∂–∞–º: –Ω–∞—á–∏—Å–ª–µ–Ω–∏–µ i = min(P_i, T) –ø—Ä–∏ Œ£ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–π = min(Œ£P_i, T), —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –¥–æ–ª—è–º P_i/Œ£P. –ü–æ–∫–∞ –Ω–µ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–∞ —Ü–µ–ª—å ‚Äî —Å–ø–∏—Å—ã–≤–∞–µ—Ç—Å—è –≤–µ—Å—å –ø–ª–∞—Ç—ë–∂. –ü—Ä–∏ –ø—Ä–µ–≤—ã—à–µ–Ω–∏–∏ —Ü–µ–ª–∏ ‚Äî —Å—É–º–º—ã —É–º–µ–Ω—å—à–∞—é—Ç—Å—è —Ä–∞–≤–Ω–æ–ø—Ä–æ–ø–æ—Ä—Ü–∏–æ–Ω–∞–ª—å–Ω–æ. –î–æ–ª–≥ –Ω–µ –æ–±—Ä–∞–∑—É–µ—Ç—Å—è.'],
  ['unit_price_by_payers', '–ü–æ—à—Ç—É—á–Ω–∞—è –∑–∞–∫—É–ø–∫–∞: —Ü–µ–Ω–∞ –∑–∞ –µ–¥–∏–Ω–∏—Ü—É x –±–µ—Ä—ë—Ç—Å—è –∏–∑ ¬´–§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π x¬ª. –ù–∞—á–∏—Å–ª–µ–Ω–∏–µ i = floor(P_i/x)*x (—Ç–æ–ª—å–∫–æ –ø–æ–ª–Ω—ã–µ –µ–¥–∏–Ω–∏—Ü—ã) —Ç–æ–ª—å–∫–æ —Ç–µ–º, –∫—Ç–æ –ø–ª–∞—Ç–∏–ª. –ß–∞—Å—Ç–∏—á–Ω—ã–π –æ—Å—Ç–∞—Ç–æ–∫ < x –æ—Å—Ç–∞—ë—Ç—Å—è –∫–∞–∫ –ø–µ—Ä–µ–ø–ª–∞—Ç–∞ –±–µ–∑ –¥–æ–ª–≥–∞. –°—É–º–º–∞—Ä–Ω–∞—è —Ü–µ–ª—å T ‚Äî –æ–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø–∞—Ä—Ç–∏–∏. –ß–∏—Å–ª–æ –µ–¥–∏–Ω–∏—Ü = ceil(T/x).'],

    ['‚ñ∂ –ó–∞–∫—Ä—ã—Ç–∏–µ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–≥–æ —Å–±–æ—Ä–∞', '–ú–µ–Ω—é Funds ‚Üí Close Collection. –í–≤–µ–¥–∏—Ç–µ collection_id (–Ω–∞–ø—Ä–∏–º–µ—Ä, C003). –°–∫—Ä–∏–ø—Ç –ø–æ—Å—á–∏—Ç–∞–µ—Ç x (DYN_CAP) –ø–æ —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏–º –ø–ª–∞—Ç–µ–∂–∞–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤, –∑–∞–ø–∏—à–µ—Ç ¬´–§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π x¬ª –∏ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç –°—Ç–∞—Ç—É—Å=–ó–∞–∫—Ä—ã—Ç. –ü–æ—Å–ª–µ –∑–∞–∫—Ä—ã—Ç–∏—è –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π x.'],
    ['DYN_CAP (—Ñ–æ—Ä–º—É–ª–∞)', 'DYN_CAP(T, payments_range) –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç cap x –ø–æ water-filling.\n–ü—Ä–∏–º–µ—Ä: =DYN_CAP(6000, {2000,2000,700,700,700,700,700}) ‚Üí 1250.'],

  ['‚ñ∂ –§–æ—Ä–º—É–ª—ã –∏ –ø—Ä–∏–º–µ—Ä—ã', '–ë–∞–ª–∞–Ω—Å: D ‚Äî –û–ø–ª–∞—á–µ–Ω–æ –≤—Å–µ–≥–æ; E ‚Äî –ù–∞—á–∏—Å–ª–µ–Ω–æ –≤—Å–µ–≥–æ.\n–ü—Ä–∏–º–µ—Ä—ã: =ACCRUED_FAMILY(A2,"ALL") ‚Äî –ø–æ –≤—Å–µ–º —Å–±–æ—Ä–∞–º; =ACCRUED_FAMILY(A2) ‚Äî —Ç–æ–ª—å–∫–æ –ø–æ –æ—Ç–∫—Ä—ã—Ç—ã–º. LABEL_TO_ID("–ò–º—è (F001)") ‚Üí F001.'],

    ['‚ñ∂ –í—ã–ø–∞–¥–∞—é—â–∏–µ —Å–ø–∏—Å–∫–∏ –∏ ID', '–í—ã–ø–∞–¥–∞—é—â–∏–µ –≤—Å–µ–≥–¥–∞ –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç ¬´–ù–∞–∑–≤–∞–Ω–∏–µ (ID)¬ª. –í–Ω—É—Ç—Ä–∏ —Ä–∞—Å—á—ë—Ç–æ–≤ ID –∏–∑–≤–ª–µ–∫–∞–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏. –ü—É—Å—Ç—ã–µ ID –≥–µ–Ω–µ—Ä–∏—Ä—É—é—Ç—Å—è –ø—Ä–∏ –Ω–∞—á–∞–ª–µ –≤–≤–æ–¥–∞ –∏–ª–∏ —á–µ—Ä–µ–∑ –º–µ–Ω—é ¬´Generate IDs (all sheets)¬ª.'],

  ['‚ñ∂ –°–æ–≤–µ—Ç—ã –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞', '–ï—Å–ª–∏ –¥—Ä–æ–ø–¥–∞—É–Ω—ã –ø—É—Å—Ç—ã–µ ‚Äî Funds ‚Üí Rebuild data validations.\n–ï—Å–ª–∏ ¬´–ù–∞—á–∏—Å–ª–µ–Ω–æ¬ª –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–æ 0 ‚Äî –ø—Ä–æ–≤–µ—Ä—å—Ç–µ ¬´–£—á–∞—Å—Ç–∏–µ¬ª –∏ ¬´–ê–∫—Ç–∏–≤–µ–Ω¬ª.\n–ï—Å–ª–∏ ¬´–ë–∞–ª–∞–Ω—Å¬ª –Ω–µ –æ–±–Ω–æ–≤–∏–ª—Å—è ‚Äî –≤–Ω–µ—Å–∏—Ç–µ/–∏–∑–º–µ–Ω–∏—Ç–µ –∑–∞–ø–∏—Å—å –≤ ¬´–ü–ª–∞—Ç–µ–∂–∏¬ª –∏–ª–∏ –∑–∞–ø—É—Å—Ç–∏—Ç–µ Setup.\n–î–ª—è —á–∏—Å—Ç–∫–∏ –ª–∏—à–Ω–∏—Ö —Å—Ç—Ä–æ–∫/–∫–æ–ª–æ–Ω–æ–∫ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤–Ω–µ—à–Ω–µ–≥–æ –≤–∏–¥–∞: Funds ‚Üí Cleanup visuals (trim sheets).']
  ];
  sh.getRange(2,1,rows.length,2).setValues(rows);
  // Wrap text and align
  sh.getRange(2,2,rows.length,1).setWrap(true).setVerticalAlignment('top');
  // Emphasize section headers
  rows.forEach((r, i) => {
    if (String(r[0]||'').slice(0,1) === '‚ñ∂') {
      sh.getRange(2+i, 1, 1, 2).setFontWeight('bold');
    }
  });
}

/** Hidden Lists: build label-form lists "Name (ID)" */
function setupListsSheet() {
  const ss = SpreadsheetApp.getActive();
  const sh = ss.getSheetByName('Lists');
  const shC = ss.getSheetByName('–°–±–æ—Ä—ã');
  const shF = ss.getSheetByName('–°–µ–º—å–∏');
  const mapC = getHeaderMap_(shC);
  const mapF = getHeaderMap_(shF);
  const cNameCol = colToLetter_(mapC['–ù–∞–∑–≤–∞–Ω–∏–µ —Å–±–æ—Ä–∞']||2);
  const cIdCol   = colToLetter_(mapC['collection_id']||1);
  const cStatusCol = colToLetter_(mapC['–°—Ç–∞—Ç—É—Å']||3);
  const fNameCol = colToLetter_(mapF['–†–µ–±—ë–Ω–æ–∫ –§–ò–û']||2);
  const fIdCol   = colToLetter_(mapF['family_id']||1);
  const fActiveCol = colToLetter_(mapF['–ê–∫—Ç–∏–≤–µ–Ω']||10);
  // OPEN_COLLECTIONS labels in A2:A  (Name (ID) for open only)
  sh.getRange('A1').setValue('OPEN_COLLECTIONS');
  sh.getRange('A2').setFormula(
    `=IFERROR(FILTER(ARRAYFORMULA(–°–±–æ—Ä—ã!${cNameCol}2:${cNameCol} & " (" & –°–±–æ—Ä—ã!${cIdCol}2:${cIdCol} & ")"), –°–±–æ—Ä—ã!${cStatusCol}2:${cStatusCol}="–û—Ç–∫—Ä—ã—Ç"),)`
  );
  // All COLLECTIONS labels in B2:B
  sh.getRange('B1').setValue('COLLECTIONS');
  sh.getRange('B2').setFormula(
    `=IFERROR(FILTER(ARRAYFORMULA(–°–±–æ—Ä—ã!${cNameCol}2:${cNameCol} & " (" & –°–±–æ—Ä—ã!${cIdCol}2:${cIdCol} & ")"), LEN(–°–±–æ—Ä—ã!${cIdCol}2:${cIdCol})),)`
  );
  // ACTIVE_FAMILIES labels in C2:C
  sh.getRange('C1').setValue('ACTIVE_FAMILIES');
  sh.getRange('C2').setFormula(
    `=IFERROR(FILTER(ARRAYFORMULA(–°–µ–º—å–∏!${fNameCol}2:${fNameCol} & " (" & –°–µ–º—å–∏!${fIdCol}2:${fIdCol} & ")"), –°–µ–º—å–∏!${fActiveCol}2:${fActiveCol}="–î–∞"),)`
  );
  // All FAMILIES labels in D2:D
  sh.getRange('D1').setValue('FAMILIES');
  sh.getRange('D2').setFormula(
    `=IFERROR(FILTER(ARRAYFORMULA(–°–µ–º—å–∏!${fNameCol}2:${fNameCol} & " (" & –°–µ–º—å–∏!${fIdCol}2:${fIdCol} & ")"), LEN(–°–µ–º—å–∏!${fIdCol}2:${fIdCol})),)`
  );
  sh.hideSheet();
}

function ensureNamedRange(name, a1) {
  const ss = SpreadsheetApp.getActive();
  const existing = ss.getNamedRanges().find(n => n.getName() === name);
  const rng = ss.getRange(a1);
  if (existing) existing.setRange(rng); else ss.setNamedRange(name, rng);
}

// Header helpers and ID utilities
function getHeaderMap_(sheet) {
  const headers = sheet.getRange(1,1,1, sheet.getLastColumn()).getValues()[0];
  const map = {};
  headers.forEach((h, i) => { map[String(h||'').trim()] = i+1; });
  return map;
}
function colToLetter_(col){ let s=""; let c=col; while(c>0){ let r=(c-1)%26; s=String.fromCharCode(65+r)+s; c=Math.floor((c-1)/26);} return s; }
function setRawIdNamedRanges_(){
  const ss = SpreadsheetApp.getActive();
  const shF = ss.getSheetByName('–°–µ–º—å–∏');
  const shC = ss.getSheetByName('–°–±–æ—Ä—ã');
  if (!shF || !shC) return;
  const mapF = getHeaderMap_(shF);
  const mapC = getHeaderMap_(shC);
  const fIdCol = colToLetter_(mapF['family_id']||1);
  const cIdCol = colToLetter_(mapC['collection_id']||1);
  ensureNamedRange('FAMILIES',    `–°–µ–º—å–∏!${fIdCol}2:${fIdCol}`);
  ensureNamedRange('COLLECTIONS', `–°–±–æ—Ä—ã!${cIdCol}2:${cIdCol}`);
}
function maybeAutoIdRow_(sh, row, idHeader, prefix, width, triggerHeaders){
  if (row < 2) return;
  const map = getHeaderMap_(sh);
  const idCol = map[idHeader];
  if (!idCol) return;
  const idVal = sh.getRange(row, idCol).getValue();
  if (idVal) return; // already set
  const hasTrigger = (triggerHeaders||[]).some(h => {
    const c = map[h]; if (!c) return false; const v = sh.getRange(row, c).getValue(); return v !== '' && v !== null;
  });
  if (!hasTrigger) return;
  const ss = SpreadsheetApp.getActive();
  fillMissingIds_(ss, sh.getName(), idCol, prefix, width);
}

/** =========================
 *  VALIDATIONS & BALANCE
 *  ========================= */
function rebuildValidations() {
  const ss = SpreadsheetApp.getActive();
  const lists = {
    statusOpenClosed: ['–û—Ç–∫—Ä—ã—Ç','–ó–∞–∫—Ä—ã—Ç'],
    activeYesNo:      ['–î–∞','–ù–µ—Ç'],
  accrualRules:     ['static_per_child','shared_total_all','shared_total_by_payers','dynamic_by_payers','proportional_by_payers','unit_price_by_payers'],
    payMethods:       ['–°–ë–ü','–∫–∞—Ä—Ç–∞','–Ω–∞–ª–∏—á–Ω—ã–µ'],
    partStatus:       ['–£—á–∞—Å—Ç–≤—É–µ—Ç','–ù–µ —É—á–∞—Å—Ç–≤—É–µ—Ç']
  };

  // –°–µ–º—å–∏: –ê–∫—Ç–∏–≤–µ–Ω
  const shF = ss.getSheetByName('–°–µ–º—å–∏');
  const mapF = getHeaderMap_(shF);
  if (mapF['–ê–∫—Ç–∏–≤–µ–Ω']) setValidationList(shF, 2, mapF['–ê–∫—Ç–∏–≤–µ–Ω'], lists.activeYesNo);

  // –°–±–æ—Ä—ã: –°—Ç–∞—Ç—É—Å, –ù–∞—á–∏—Å–ª–µ–Ω–∏–µ
  const shC = ss.getSheetByName('–°–±–æ—Ä—ã');
  const mapC = getHeaderMap_(shC);
  if (mapC['–°—Ç–∞—Ç—É—Å']) setValidationList(shC, 2, mapC['–°—Ç–∞—Ç—É—Å'], lists.statusOpenClosed);
  if (mapC['–ù–∞—á–∏—Å–ª–µ–Ω–∏–µ']) setValidationList(shC, 2, mapC['–ù–∞—á–∏—Å–ª–µ–Ω–∏–µ'], lists.accrualRules);
  // –°–±–æ—Ä—ã: –í–æ–∑–º–µ—â–µ–Ω–æ (–î–∞/–ù–µ—Ç)
  if (mapC['–í–æ–∑–º–µ—â–µ–Ω–æ']) setValidationList(shC, 2, mapC['–í–æ–∑–º–µ—â–µ–Ω–æ'], lists.activeYesNo);

  // –£—á–∞—Å—Ç–∏–µ: A=open collections labels, B=active families labels, C=–°—Ç–∞—Ç—É—Å
  const shU = ss.getSheetByName('–£—á–∞—Å—Ç–∏–µ');
  const mapU = getHeaderMap_(shU);
  if (mapU['collection_id (label)']) setValidationNamedRange(shU, 2, mapU['collection_id (label)'], 'OPEN_COLLECTIONS_LABELS');
  if (mapU['family_id (label)'])     setValidationNamedRange(shU, 2, mapU['family_id (label)'],     'ACTIVE_FAMILIES_LABELS');
  if (mapU['–°—Ç–∞—Ç—É—Å'])                 setValidationList(shU, 2, mapU['–°—Ç–∞—Ç—É—Å'], lists.partStatus);

  // –ü–ª–∞—Ç–µ–∂–∏: family label, collection label, –°–ø–æ—Å–æ–±, –°—É–º–º–∞ > 0
  const shP = ss.getSheetByName('–ü–ª–∞—Ç–µ–∂–∏');
  const mapP = getHeaderMap_(shP);
  if (mapP['family_id (label)'])     setValidationNamedRange(shP, 2, mapP['family_id (label)'],     'FAMILIES_LABELS');
  if (mapP['collection_id (label)']) setValidationNamedRange(shP, 2, mapP['collection_id (label)'], 'COLLECTIONS_LABELS');
  if (mapP['–°–ø–æ—Å–æ–±'])                 setValidationList(shP, 2, mapP['–°–ø–æ—Å–æ–±'], lists.payMethods);
  if (mapP['–°—É–º–º–∞'])                  setValidationNumberGreaterThan(shP, 2, mapP['–°—É–º–º–∞'], 0);

  SpreadsheetApp.getActive().toast('Validations rebuilt.', 'Funds');
}

function setValidationList(sh, rowStart, col, values) {
  const rule = SpreadsheetApp.newDataValidation()
    .requireValueInList(values, true)
    .setAllowInvalid(false)
    .build();
  sh.getRange(rowStart, col, sh.getMaxRows() - rowStart + 1, 1).setDataValidation(rule);
}
function setValidationNamedRange(sh, rowStart, col, namedRange) {
  const ss = SpreadsheetApp.getActive();
  const nr = ss.getRangeByName(namedRange);
  const rule = SpreadsheetApp.newDataValidation()
    .requireValueInRange(nr, true)
    .setAllowInvalid(false)
    .build();
  sh.getRange(rowStart, col, sh.getMaxRows() - rowStart + 1, 1).setDataValidation(rule);
}
function setValidationNumberGreaterThan(sh, rowStart, col, minValue) {
  const rule = SpreadsheetApp.newDataValidation()
    .requireNumberGreaterThan(minValue)
    .setAllowInvalid(false)
    .build();
  sh.getRange(rowStart, col, sh.getMaxRows() - rowStart + 1, 1).setDataValidation(rule);
}

function setupBalanceExamples() {
  const ss = SpreadsheetApp.getActive();
  const sh = ss.getSheetByName('–ë–∞–ª–∞–Ω—Å');

  // A2: —Å–ø–∏—Å–æ–∫ family_id –∏–∑ ¬´–°–µ–º—å–∏¬ª (–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω)
  const shF = ss.getSheetByName('–°–µ–º—å–∏');
  const mapF = getHeaderMap_(shF);
  const idCol = colToLetter_(mapF['family_id']||1);
  const nameCol = colToLetter_(mapF['–†–µ–±—ë–Ω–æ–∫ –§–ò–û']||2);
  const famLastRow = shF.getLastRow();
  
  // Limit ARRAYFORMULA to actual data range instead of open-ended
  if (famLastRow > 1) {
    sh.getRange('A2').setFormula(`=ARRAYFORMULA(IFERROR(FILTER(–°–µ–º—å–∏!${idCol}2:${idCol}${famLastRow}, LEN(–°–µ–º—å–∏!${idCol}2:${idCol}${famLastRow})), ))`);
  // Use array literal to ensure lookup table is [ID, Name] left-to-right even if ID column is to the right of Name
  sh.getRange('B2').setFormula(`=ARRAYFORMULA(IF(LEN(A2:A)=0, "", IFERROR(VLOOKUP(A2:A, {–°–µ–º—å–∏!${idCol}2:${idCol}${famLastRow}, –°–µ–º—å–∏!${nameCol}2:${nameCol}${famLastRow}}, 2, FALSE), "")))`);
  }

  // –°–µ–ª–µ–∫—Ç–æ—Ä —Ñ–∏–ª—å—Ç—Ä–∞ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–π: OPEN | ALL (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é ‚Äî ALL)
  sh.getRange('H1').setValue('–§–∏–ª—å—Ç—Ä –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è');
  sh.getRange('I1').setValue('ALL');
  const rule = SpreadsheetApp.newDataValidation().requireValueInList(['OPEN','ALL'], true).setAllowInvalid(false).build();
  sh.getRange('I1').setDataValidation(rule).setHorizontalAlignment('center');
  sh.getRange('I1').setNote('–í—ã–±–µ—Ä–∏—Ç–µ OPEN (—Ç–æ–ª—å–∫–æ –æ—Ç–∫—Ä—ã—Ç—ã–µ) –∏–ª–∏ ALL (–≤—Å–µ —Å–±–æ—Ä—ã).');

  // –ü—Ä–æ—Ç—è–Ω—É—Ç—å —Ñ–æ—Ä–º—É–ª—ã –ø–æ —Å—Ç—Ä–æ–∫–∞–º –¥–ª—è C:F –Ω–∞ —Ç–µ–∫—É—â–µ–µ —á–∏—Å–ª–æ —Å–µ–º–µ–π
  refreshBalanceFormulas_();

  sh.getRange('H3').setValue('–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: –¥–∞—Ç—ã –ø–ª–∞—Ç—ë–∂–µ–∫ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏ (—Ñ–∏–ª—å—Ç—Ä—ã/–æ—Ç—á—ë—Ç—ã). –†–∞—Å—á—ë—Ç—ã –º–≥–Ω–æ–≤–µ–Ω–Ω—ã–µ.');
  
  // Setup detail sheet
  setupDetailSheet_();
  // Setup summary sheet
  setupSummarySheet_();
}

function refreshBalanceFormulas_() {
  const ss = SpreadsheetApp.getActive();
  const shBal = ss.getSheetByName('–ë–∞–ª–∞–Ω—Å');
  const shFam = ss.getSheetByName('–°–µ–º—å–∏');
  const last = shFam.getLastRow();
  const famCount = Math.max(0, last - 1); // –±–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞

  // Re-apply A2/B2 formulas (IDs and Names) to ensure correct lookup after structure changes
  if (last > 1) {
    const mapF = getHeaderMap_(shFam);
    const idColLetter = colToLetter_(mapF['family_id']||1);
    const nameColLetter = colToLetter_(mapF['–†–µ–±—ë–Ω–æ–∫ –§–ò–û']||2);
    const famLastRow = last;
    shBal.getRange('A2').setFormula(`=ARRAYFORMULA(IFERROR(FILTER(–°–µ–º—å–∏!${idColLetter}2:${idColLetter}${famLastRow}, LEN(–°–µ–º—å–∏!${idColLetter}2:${idColLetter}${famLastRow})), ))`);
    shBal.getRange('B2').setFormula(`=ARRAYFORMULA(IF(LEN(A2:A)=0, "", IFERROR(VLOOKUP(A2:A, {–°–µ–º—å–∏!${idColLetter}2:${idColLetter}${famLastRow}, –°–µ–º—å–∏!${nameColLetter}2:${nameColLetter}${famLastRow}}, 2, FALSE), "")))`);
  }
  
  // Clear old formulas beyond actual data first
  const currentLastRow = shBal.getLastRow();
  if (currentLastRow > 1) {
    // Clear all formula columns completely
    shBal.getRange(2, 3, currentLastRow - 1, 4).clearContent();
  }
  
  if (famCount === 0) return;

  // Only create formulas for actual families (much more efficient)
  const rows = famCount;
  const formulasC = []; // —Ç–µ–∫—É—â–∞—è –ø–µ—Ä–µ–ø–ª–∞—Ç–∞ = MAX(0, –û–ø–ª–∞—á–µ–Ω–æ - –°–ø–∏—Å–∞–Ω–æ)
  const formulasD = []; // –û–ø–ª–∞—á–µ–Ω–æ –≤—Å–µ–≥–æ
  const formulasE = []; // —Å–ø–∏—Å–∞–Ω–æ (–Ω–∞—á–∏—Å–ª–µ–Ω–æ)
  const formulasF = []; // –ó–∞–¥–æ–ª–∂–µ–Ω–Ω–æ—Å—Ç—å = MAX(0, –°–ø–∏—Å–∞–Ω–æ - –û–ø–ª–∞—á–µ–Ω–æ)
  
  for (let i = 0; i < rows; i++) {
    const r = 2 + i;
    // D: –æ–ø–ª–∞—á–µ–Ω–æ
    formulasD.push([`=IFERROR(PAYED_TOTAL_FAMILY($A${r}),0)`]);
    // E: –Ω–∞—á–∏—Å–ª–µ–Ω–æ/—Å–ø–∏—Å–∞–Ω–æ (with selector)
    formulasE.push([`=IFERROR(ACCRUED_FAMILY($A${r}, IF(LEN($I$1)=0, "ALL", $I$1)), 0)`]);
    // C: —Ç–µ–∫—É—â–∞—è –ø–µ—Ä–µ–ø–ª–∞—Ç–∞
    formulasC.push([`=MAX(0, D${r} - E${r})`]);
    // F: –∑–∞–¥–æ–ª–∂–µ–Ω–Ω–æ—Å—Ç—å
    formulasF.push([`=MAX(0, E${r} - D${r})`]);
  }
  
  // Set formulas only for actual family rows
  shBal.getRange(2, 3, rows, 1).setFormulas(formulasC);
  shBal.getRange(2, 4, rows, 1).setFormulas(formulasD);
  shBal.getRange(2, 5, rows, 1).setFormulas(formulasE);
  shBal.getRange(2, 6, rows, 1).setFormulas(formulasF);

  // Ensure formulas materialize before styling, then re-apply zebra and column styles
  SpreadsheetApp.flush();
  try { styleSheetHeader_(shBal); styleBalanceSheet_(shBal); } catch(_) {}
}

function setupDetailSheet_() {
  const ss = SpreadsheetApp.getActive();
  const sh = ss.getSheetByName('–î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è');
  if (!sh) return;
  
  // Clear old data
  const lastRow = sh.getLastRow();
  if (lastRow > 1) sh.getRange(2, 1, lastRow-1, sh.getLastColumn()).clearContent();
  
  // Selector for status filter
  sh.getRange('J1').setValue('–§–∏–ª—å—Ç—Ä');
  sh.getRange('K1').setValue('ALL');
  const rule = SpreadsheetApp.newDataValidation().requireValueInList(['OPEN','ALL'], true).setAllowInvalid(false).build();
  sh.getRange('K1').setDataValidation(rule).setHorizontalAlignment('center');
  sh.getRange('K1').setNote('OPEN (—Ç–æ–ª—å–∫–æ –æ—Ç–∫—Ä—ã—Ç—ã–µ) –∏–ª–∏ ALL (–≤—Å–µ —Å–±–æ—Ä—ã)');
  // Tick cell to force recalc on demand
  sh.getRange('J2').setValue('Tick');
  sh.getRange('K2').setValue(new Date().toISOString());
  sh.getRange('J3').setValue('–î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è –ø–ª–∞—Ç–µ–∂–µ–π –∏ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–π. –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –∏ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ —á–µ—Ä–µ–∑ Tick.');
  
  // Dynamic formulas starting from A2
  sh.getRange('A2').setFormula(`=GENERATE_DETAIL_BREAKDOWN(IF(LEN($K$1)=0,"ALL",$K$1), $K$2)`);
}

function refreshDetailSheet_() {
  const ss = SpreadsheetApp.getActive();
  const sh = ss.getSheetByName('–î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è');
  if (!sh) return;
  
  // Trigger recalculation by touching the formula cell
  const current = sh.getRange('A2').getFormula();
  if (current.includes('GENERATE_DETAIL_BREAKDOWN')) {
    // Update tick to force recalculation
    sh.getRange('K2').setValue(new Date().toISOString());
  sh.getRange('A2').setFormula(current);
  SpreadsheetApp.flush();
  try { styleSheetHeader_(sh); styleDetailSheet_(sh); } catch(_) {}
  }
}

function setupSummarySheet_() {
  const ss = SpreadsheetApp.getActive();
  const sh = ss.getSheetByName('–°–≤–æ–¥–∫–∞');
  if (!sh) return;
  // Clear old data
  const lastRow = sh.getLastRow();
  if (lastRow > 1) sh.getRange(2, 1, lastRow-1, sh.getLastColumn()).clearContent();
  // Selector and tick
  sh.getRange('J1').setValue('–§–∏–ª—å—Ç—Ä');
  sh.getRange('K1').setValue('ALL');
  const rule = SpreadsheetApp.newDataValidation().requireValueInList(['OPEN','ALL'], true).setAllowInvalid(false).build();
  sh.getRange('K1').setDataValidation(rule).setHorizontalAlignment('center');
  sh.getRange('K1').setNote('OPEN (—Ç–æ–ª—å–∫–æ –æ—Ç–∫—Ä—ã—Ç—ã–µ) –∏–ª–∏ ALL (–≤—Å–µ —Å–±–æ—Ä—ã, —Å–Ω–∞—á–∞–ª–∞ –æ—Ç–∫—Ä—ã—Ç—ã–µ, –Ω–∏–∂–µ ‚Äî –∑–∞–∫—Ä—ã—Ç—ã–µ)');
  sh.getRange('J2').setValue('Tick');
  sh.getRange('K2').setValue(new Date().toISOString());
  // Array formula
  sh.getRange('A2').setFormula(`=GENERATE_COLLECTION_SUMMARY(IF(LEN($K$1)=0,"ALL",$K$1), $K$2)`);
  sh.getRange('J3').setValue('–°–≤–æ–¥–∫–∞ –ø–æ —Å–±–æ—Ä–∞–º. ALL: —Å–≤–µ—Ä—Ö—É –æ—Ç–∫—Ä—ã—Ç—ã–µ, –≤–Ω–∏–∑—É –∑–∞–∫—Ä—ã—Ç—ã–µ (–∏—Å—Ç–æ—Ä–∏—è).');
  SpreadsheetApp.flush();
  try { styleSheetHeader_(sh); styleSummarySheet_(sh); } catch(_) {}
}

function refreshSummarySheet_() {
  const ss = SpreadsheetApp.getActive();
  const sh = ss.getSheetByName('–°–≤–æ–¥–∫–∞');
  if (!sh) return;
  const current = sh.getRange('A2').getFormula();
  if (current.includes('GENERATE_COLLECTION_SUMMARY')) {
    sh.getRange('K2').setValue(new Date().toISOString());
    sh.getRange('A2').setFormula(current);
    // Re-apply styles to ensure alternating colors and header shading persist after rebuild
    try {
  SpreadsheetApp.flush();
      styleSheetHeader_(sh);
      styleSummarySheet_(sh);
    } catch (e) {}
  }
}

/** Manual recalculation entry point */
function recalculateAll() {
  try {
    refreshBalanceFormulas_();
  // bump detail tick to force recalculation
  const sh = SpreadsheetApp.getActive().getSheetByName('–î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è');
  if (sh) sh.getRange('K2').setValue(new Date().toISOString());
    refreshDetailSheet_();
  // bump summary tick and refresh
  const sh2 = SpreadsheetApp.getActive().getSheetByName('–°–≤–æ–¥–∫–∞');
  if (sh2) sh2.getRange('K2').setValue(new Date().toISOString());
  refreshSummarySheet_();
  SpreadsheetApp.getActive().toast('Balance, Detail and Summary recalculated.', 'Funds');
  SpreadsheetApp.getUi().alert('–ü–µ—Ä–µ—Å—á—ë—Ç –∑–∞–≤–µ—Ä—à—ë–Ω', '–û–±–Ω–æ–≤–ª–µ–Ω—ã: ¬´–ë–∞–ª–∞–Ω—Å¬ª, ¬´–î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è¬ª, ¬´–°–≤–æ–¥–∫–∞¬ª.', SpreadsheetApp.getUi().ButtonSet.OK);
  } catch (e) {
    toastErr_('Recalculate failed: ' + e.message);
  SpreadsheetApp.getUi().alert('–û—à–∏–±–∫–∞ –ø–µ—Ä–µ—Å—á—ë—Ç–∞', String(e && e.message ? e.message : e), SpreadsheetApp.getUi().ButtonSet.OK);
  }
}

/** =========================
 *  ID GENERATION & CLOSING
 *  ========================= */
function generateAllIds() {
  const ss = SpreadsheetApp.getActive();
  const plan = [
    {sheet: '–°–µ–º—å–∏',   idHeader: 'family_id',    prefix: 'F',   width: 3},
    {sheet: '–°–±–æ—Ä—ã',   idHeader: 'collection_id',prefix: 'C',   width: 3},
    {sheet: '–ü–ª–∞—Ç–µ–∂–∏', idHeader: 'payment_id',   prefix: 'PMT', width: 3}
  ];
  plan.forEach(p => {
    const sh = ss.getSheetByName(p.sheet);
    const map = getHeaderMap_(sh);
    const col = map[p.idHeader] || 1;
    fillMissingIds_(ss, p.sheet, col, p.prefix, p.width);
  });
  SpreadsheetApp.getActive().toast('IDs generated where empty.', 'Funds');
  // Ensure Balance formulas cover current families
  refreshBalanceFormulas_();
}

function fillMissingIds_(ss, sheetName, idCol, prefix, padWidth) {
  const sh = ss.getSheetByName(sheetName);
  const last = sh.getLastRow();
  if (last < 2) return;
  const rng = sh.getRange(2, idCol, last - 1, 1);
  const vals = rng.getValues().map(r => r[0]);

  let maxNum = 0;
  vals.forEach(v => {
    if (typeof v === 'string' && v.startsWith(prefix)) {
      const n = parseInt(v.replace(prefix, ''), 10);
      if (!isNaN(n)) maxNum = Math.max(maxNum, n);
    }
  });

  const out = vals.slice();
  for (let i = 0; i < out.length; i++) {
    if (!out[i]) {
      maxNum += 1;
      out[i] = prefix + String(maxNum).padStart(padWidth, '0');
    }
  }
  rng.setValues(out.map(v => [v]));
}

function closeCollectionPrompt() {
  const ui = SpreadsheetApp.getUi();
  const resp = ui.prompt('Close Collection', '–í–≤–µ–¥–∏—Ç–µ collection_id (–Ω–∞–ø—Ä–∏–º–µ—Ä, C001):', ui.ButtonSet.OK_CANCEL);
  if (resp.getSelectedButton() !== ui.Button.OK) return;
  const collectionId = (resp.getResponseText() || '').trim();
  if (!collectionId) return;
  closeCollection_(collectionId);
}

function closeCollection_(collectionId) {
  const ss = SpreadsheetApp.getActive();
  const shC = ss.getSheetByName('–°–±–æ—Ä—ã');
  const shF = ss.getSheetByName('–°–µ–º—å–∏');
  const shU = ss.getSheetByName('–£—á–∞—Å—Ç–∏–µ');
  const shP = ss.getSheetByName('–ü–ª–∞—Ç–µ–∂–∏');
  const mapC = getHeaderMap_(shC);
  const mapF = getHeaderMap_(shF);
  const mapU = getHeaderMap_(shU);
  const mapP = getHeaderMap_(shP);

  // Locate collection row by collection_id
  const colIdCol = mapC['collection_id'];
  if (!colIdCol) return toastErr_('–ù–µ –Ω–∞–π–¥–µ–Ω —Å—Ç–æ–ª–±–µ—Ü collection_id.');
  const rowsC = shC.getLastRow();
  if (rowsC < 2) return toastErr_('–ù–µ—Ç —Å–±–æ—Ä–æ–≤.');
  const ids = shC.getRange(2, colIdCol, rowsC - 1, 1).getValues().map(r => String(r[0]||'').trim());
  const idx = ids.findIndex(v => v === collectionId);
  if (idx === -1) return toastErr_('–°–±–æ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω: ' + collectionId);
  const rowNum = 2 + idx;

  // Read needed fields
  const accrual = String(shC.getRange(rowNum, mapC['–ù–∞—á–∏—Å–ª–µ–Ω–∏–µ']).getValue()||'').trim();
  const paramT  = Number(shC.getRange(rowNum, mapC['–ü–∞—Ä–∞–º–µ—Ç—Ä —Å—É–º–º—ã']).getValue()||0);

  // Build active families set
  const famActiveCol = mapF['–ê–∫—Ç–∏–≤–µ–Ω'];
  const famIdCol     = mapF['family_id'];
  const famRows = shF.getLastRow();
  const activeSet = new Set();
  if (famRows >= 2 && famActiveCol && famIdCol) {
    const vals = shF.getRange(2, 1, famRows - 1, shF.getLastColumn()).getValues();
    const headers = shF.getRange(1,1,1,shF.getLastColumn()).getValues()[0];
    const hmap = {};
    headers.forEach((h,i)=>hmap[h]=i);
    const iId = hmap['family_id'];
    const iAct = hmap['–ê–∫—Ç–∏–≤–µ–Ω'];
    vals.forEach(r=>{ const id=String(r[iId]||'').trim(); const act=String(r[iAct]||'').trim()==='–î–∞'; if(id&&act) activeSet.add(id); });
  }

  // Participation map for this collection
  const partInclude = new Set();
  const partExclude = new Set();
  let hasInclude = false;
  const uRows = shU.getLastRow();
  if (uRows >= 2) {
    const uVals = shU.getRange(2, 1, uRows - 1, shU.getLastColumn()).getValues();
    const uHeaders = shU.getRange(1,1,1,shU.getLastColumn()).getValues()[0];
    const ui = {}; uHeaders.forEach((h,i)=>ui[h]=i);
    uVals.forEach(r=>{
      const c = getIdFromLabelish_(String(r[ui['collection_id (label)']]||''));
      if (c !== collectionId) return;
      const f = getIdFromLabelish_(String(r[ui['family_id (label)']]||''));
      const st = String(r[ui['–°—Ç–∞—Ç—É—Å']]||'').trim();
      if (!f) return;
      if (st === '–£—á–∞—Å—Ç–≤—É–µ—Ç') { hasInclude = true; partInclude.add(f); }
      else if (st === '–ù–µ —É—á–∞—Å—Ç–≤—É–µ—Ç') { partExclude.add(f); }
    });
  }
  // Resolve participants
  const participants = new Set();
  if (hasInclude) partInclude.forEach(f=>participants.add(f));
  else activeSet.forEach(f=>participants.add(f));
  partExclude.forEach(f=>participants.delete(f));

  // Payments for this collection (only participating)
  const paymentsByFam = new Map();
  const pRows = shP.getLastRow();
  if (pRows >= 2) {
    const pVals = shP.getRange(2, 1, pRows - 1, shP.getLastColumn()).getValues();
    const pHeaders = shP.getRange(1,1,1,shP.getLastColumn()).getValues()[0];
    const pi = {}; pHeaders.forEach((h,i)=>pi[h]=i);
    pVals.forEach(r=>{
      const cid = getIdFromLabelish_(String(r[pi['collection_id (label)']]||''));
      if (cid !== collectionId) return;
      const fid = getIdFromLabelish_(String(r[pi['family_id (label)']]||''));
      const sum = Number(r[pi['–°—É–º–º–∞']]||0);
      if (!fid || sum <= 0) return;
      if (!participants.has(fid)) return;
      paymentsByFam.set(fid, (paymentsByFam.get(fid)||0) + sum);
    });
  }
  const payments = Array.from(paymentsByFam.values());
  // Compute and write back only for dynamic_by_payers; for –¥—Ä—É–≥–∏—Ö —Ä–µ–∂–∏–º–æ–≤ –Ω–µ —Ç—Ä–æ–≥–∞–µ–º ¬´–§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π x¬ª
  if (accrual === 'dynamic_by_payers') {
    const x = DYN_CAP_(paramT, payments);
    if (mapC['–§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π x']) shC.getRange(rowNum, mapC['–§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π x']).setValue(x);
    if (mapC['–°—Ç–∞—Ç—É—Å'])           shC.getRange(rowNum, mapC['–°—Ç–∞—Ç—É—Å']).setValue('–ó–∞–∫—Ä—ã—Ç');
    SpreadsheetApp.getActive().toast(`–°–±–æ—Ä ${collectionId} –∑–∞–∫—Ä—ã—Ç. x=${x}`, 'Funds');
  } else {
    // For unit_price_by_payers and others: do not overwrite Fixed X; just close
    if (mapC['–°—Ç–∞—Ç—É—Å'])           shC.getRange(rowNum, mapC['–°—Ç–∞—Ç—É—Å']).setValue('–ó–∞–∫—Ä—ã—Ç');
    SpreadsheetApp.getActive().toast(`–°–±–æ—Ä ${collectionId} –∑–∞–∫—Ä—ã—Ç.`, 'Funds');
  }
}

/** =========================
 *  SAMPLE DATA (separate)
 *  ========================= */
function loadSampleDataPrompt() {
  const ui = SpreadsheetApp.getUi();
  const choice = ui.alert(
    'Load Sample Data',
    '–≠—Ç–æ –¥–æ–±–∞–≤–∏—Ç –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (—Å–µ–º—å–∏, —Å–±–æ—Ä—ã, —É—á–∞—Å—Ç–∏–µ, –ø–ª–∞—Ç–µ–∂–∏). –°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ –Ω–µ —Å—Ç–∏—Ä–∞—é—Ç—Å—è, –Ω–æ –º–æ–≥—É—Ç –ø–µ—Ä–µ–º–µ—à–∞—Ç—å—Å—è —Å –¥–µ–º–æ. –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å?',
    ui.ButtonSet.OK_CANCEL
  );
  if (choice !== ui.Button.OK) return;
  loadSampleData_();
  SpreadsheetApp.getActive().toast('Demo data added.', 'Funds');
  refreshBalanceFormulas_();
}

function loadSampleData_() {
  const ss = SpreadsheetApp.getActive();
  const shF = ss.getSheetByName('–°–µ–º—å–∏');
  const shC = ss.getSheetByName('–°–±–æ—Ä—ã');
  const shU = ss.getSheetByName('–£—á–∞—Å—Ç–∏–µ');
  const shP = ss.getSheetByName('–ü–ª–∞—Ç–µ–∂–∏');
  const mapF = getHeaderMap_(shF);
  const mapC = getHeaderMap_(shC);
  const mapP = getHeaderMap_(shP);

  // Families (10 demo rows)
  const famStart = shF.getLastRow() + 1;
  // Order per headers: ['–†–µ–±—ë–Ω–æ–∫ –§–ò–û','–î–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è','–ú–∞–º–∞ –§–ò–û','–ú–∞–º–∞ —Ç–µ–ª–µ—Ñ–æ–Ω','–ú–∞–º–∞ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã','–ú–∞–º–∞ —Ç–µ–ª–µ–≥—Ä–∞–º','–ü–∞–ø–∞ –§–ò–û','–ü–∞–ø–∞ —Ç–µ–ª–µ—Ñ–æ–Ω','–ü–∞–ø–∞ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã','–ü–∞–ø–∞ —Ç–µ–ª–µ–≥—Ä–∞–º','–ê–∫—Ç–∏–≤–µ–Ω','–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π','family_id']
  const famRows = [
    ['–ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω', '2015-03-15', '–ò–≤–∞–Ω–æ–≤–∞ –ê–Ω–Ω–∞','+7 900 000-00-01','****1111','@anna_ivanova','–ò–≤–∞–Ω–æ–≤ –ü—ë—Ç—Ä','+7 900 000-10-01','****2222','@petr_ivanov','–î–∞','', ''],
    ['–ü–µ—Ç—Ä–æ–≤ –ü—ë—Ç—Ä', '2015-06-02', '–ü–µ—Ç—Ä–æ–≤–∞ –ú–∞—Ä–∏—è','+7 900 000-00-02','****3333','@petrova_m','–ü–µ—Ç—Ä–æ–≤ –ò–≤–∞–Ω','+7 900 000-10-02','****4444','@ivan_petrov','–î–∞','', ''],
    ['–°–∏–¥–æ—Ä–æ–≤–∞ –í–µ—Ä–∞','2015-01-21','–°–∏–¥–æ—Ä–æ–≤–∞ –û–ª—å–≥–∞','+7 900 000-00-03','****5555','@sidorova_olga','–°–∏–¥–æ—Ä–æ–≤ –ê–Ω—Ç–æ–Ω','+7 900 000-10-03','****6666','@sid_anton','–î–∞','', ''],
    ['–ö—É–∑–Ω–µ—Ü–æ–≤ –ê—Ä—Ç—ë–º','2015-12-11','–ö—É–∑–Ω–µ—Ü–æ–≤–∞ –ò—Ä–∏–Ω–∞','+7 900 000-00-04','****7777','@irina_kuz','–ö—É–∑–Ω–µ—Ü–æ–≤ –û–ª–µ–≥','+7 900 000-10-04','****8888','@oleg_kuz','–î–∞','', ''],
    ['–°–º–∏—Ä–Ω–æ–≤–∞ –Æ–ª—è','2015-08-05','–°–º–∏—Ä–Ω–æ–≤–∞ –ê–Ω–Ω–∞','+7 900 000-00-05','****9999','@anna_smir','–°–º–∏—Ä–Ω–æ–≤ –†–æ–º–∞–Ω','+7 900 000-10-05','****0001','@roman_smir','–î–∞','', ''],
    ['–ù–æ–≤–∏–∫–æ–≤–∞ –ù–∏–Ω–∞','2015-04-19','–ù–æ–≤–∏–∫–æ–≤–∞ –û–∫—Å–∞–Ω–∞','+7 900 000-00-06','****0002','@oks_nov','–ù–æ–≤–∏–∫–æ–≤ –ü–∞–≤–µ–ª','+7 900 000-10-06','****0003','@pavel_nov','–î–∞','', ''],
    ['–û—Ä–ª–æ–≤–∞ –õ–µ–Ω–∞','2015-07-23','–û—Ä–ª–æ–≤–∞ –¢–∞—Ç—å—è–Ω–∞','+7 900 000-00-07','****0004','@tat_orl','–û—Ä–ª–æ–≤ –Æ—Ä–∏–π','+7 900 000-10-07','****0005','@y_orlov','–î–∞','', ''],
    ['–§—ë–¥–æ—Ä–æ–≤ –î–∞–Ω—è','2015-02-14','–§—ë–¥–æ—Ä–æ–≤–∞ –ê–ª–ª–∞','+7 900 000-00-08','****0006','@alla_fed','–§—ë–¥–æ—Ä–æ–≤ –ò–≥–æ—Ä—å','+7 900 000-10-08','****0007','@igor_fed','–î–∞','', ''],
    ['–ú–∞–∫—Å–∏–º–æ–≤–∞ –ê–Ω—è','2015-09-30','–ú–∞–∫—Å–∏–º–æ–≤–∞ –ù–∏–∫–∞','+7 900 000-00-09','****0008','@nika_maks','–ú–∞–∫—Å–∏–º–æ–≤ –ê—Ä—Ç—ë–º','+7 900 000-10-09','****0009','@art_maks','–î–∞','', ''],
    ['–ï–≥–æ—Ä–æ–≤–∞ –°–∞—à–∞','2015-11-01','–ï–≥–æ—Ä–æ–≤–∞ –ê–ª–∏–Ω–∞','+7 900 000-00-10','****0010','@alina_egor','–ï–≥–æ—Ä–æ–≤ –ö–∏—Ä–∏–ª–ª','+7 900 000-10-10','****0011','@kir_egor','–î–∞','', '']
  ];
  shF.getRange(famStart, 1, famRows.length, shF.getLastColumn()).setValues(famRows);

  // Generate IDs for families
  if (mapF['family_id']) fillMissingIds_(ss, '–°–µ–º—å–∏', mapF['family_id'], 'F', 3);

  // Collections (demo for all modes)
  const colStart = shC.getLastRow() + 1;
  // Current headers:
  // ['–ù–∞–∑–≤–∞–Ω–∏–µ —Å–±–æ—Ä–∞','–°—Ç–∞—Ç—É—Å','–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞','–î–µ–¥–ª–∞–π–Ω','–ù–∞—á–∏—Å–ª–µ–Ω–∏–µ','–ü–∞—Ä–∞–º–µ—Ç—Ä —Å—É–º–º—ã','–§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π x','–ó–∞–∫—É–ø–∫–∞ –∏–∑ —Å—Ä–µ–¥—Å—Ç–≤','–í–æ–∑–º–µ—â–µ–Ω–æ','–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π','collection_id','–°—Å—ã–ª–∫–∞ –Ω–∞ –≥—É–≥–ª–¥–∏—Å–∫']
  const colRows = [
    ['–ö–∞–Ω—Ü—Ç–æ–≤–∞—Ä—ã —Å–µ–Ω—Ç—è–±—Ä—å', '–û—Ç–∫—Ä—ã—Ç', '', '', 'static_per_child', 500,   '',         '',      '', '–§–∏–∫—Å 500‚ÇΩ –Ω–∞ —Å–µ–º—å—é',           '', ''],
    ['–ù–æ–≤—ã–π –≥–æ–¥',           '–û—Ç–∫—Ä—ã—Ç', '', '', 'shared_total_all', 12000, '',         '',      '', '–û–±—â–∞—è —Å—É–º–º–∞ –¥–µ–ª–∏—Ç—Å—è –Ω–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤', '', ''],
    ['–ü–æ–¥–∞—Ä–æ–∫ —É—á–∏—Ç–µ–ª—é',     '–û—Ç–∫—Ä—ã—Ç', '', '', 'dynamic_by_payers', 9000, '',         '',      '', '–î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π —Å–±–æ—Ä –ø–æ —Ü–µ–ª–∏ 9000‚ÇΩ',   '', ''],
    ['–§–æ—Ç–æ—Å–µ—Å—Å–∏—è',          '–û—Ç–∫—Ä—ã—Ç', '', '', 'shared_total_by_payers', 10000, '',   '',      '', '–î–µ–ª–∏–º —Å—É–º–º—É –º–µ–∂–¥—É –æ–ø–ª–∞—Ç–∏–≤—à–∏–º–∏',     '', ''],
    ['–ü–æ–º–æ—â—å –∫–ª–∞—Å—Å—É',       '–û—Ç–∫—Ä—ã—Ç', '', '', 'proportional_by_payers', 8000, '',    '',      '', '–ü—Ä–æ–ø–æ—Ä—Ü–∏–æ–Ω–∞–ª—å–Ω–æ –ø–ª–∞—Ç–µ–∂–∞–º',         '', ''],
    ['–°–ø–æ—Ä—Ç–∏–≤–Ω–∞—è —Ñ–æ—Ä–º–∞',    '–û—Ç–∫—Ä—ã—Ç', '', '', 'unit_price_by_payers', 15000, 1500,   '',      '–ù–µ—Ç', '–ü–æ—à—Ç—É—á–Ω–∞—è –∑–∞–∫—É–ø–∫–∞: x=1500‚ÇΩ',      '', '']
  ];
  shC.getRange(colStart, 1, colRows.length, shC.getLastColumn()).setValues(colRows);

  // Generate IDs for collections
  if (mapC['collection_id']) fillMissingIds_(ss, '–°–±–æ—Ä—ã', mapC['collection_id'], 'C', 3);

  // Refresh Lists (labels)
  setupListsSheet();

  // Build labels for newly added collections based on their actual IDs
  const newCount = colRows.length;
  const cVals = shC.getRange(colStart, 1, newCount, shC.getLastColumn()).getValues();
  const cHdr = shC.getRange(1,1,1,shC.getLastColumn()).getValues()[0];
  const ci = {}; cHdr.forEach((h,idx)=>ci[h]=idx);
  const labelByName = new Map();
  cVals.forEach(r => {
    const nm = String(r[ci['–ù–∞–∑–≤–∞–Ω–∏–µ —Å–±–æ—Ä–∞']]||'').trim();
    const id = String(r[ci['collection_id']]||'').trim();
    if (nm && id) labelByName.set(nm, `${nm} (${id})`);
  });
  const c1Label = labelByName.get('–ö–∞–Ω—Ü—Ç–æ–≤–∞—Ä—ã —Å–µ–Ω—Ç—è–±—Ä—å') || '';
  const c2Label = labelByName.get('–ù–æ–≤—ã–π –≥–æ–¥') || '';
  const c3Label = labelByName.get('–ü–æ–¥–∞—Ä–æ–∫ —É—á–∏—Ç–µ–ª—é') || '';
  const c4Label = labelByName.get('–§–æ—Ç–æ—Å–µ—Å—Å–∏—è') || '';
  const c5Label = labelByName.get('–ü–æ–º–æ—â—å –∫–ª–∞—Å—Å—É') || '';
  const c6Label = labelByName.get('–°–ø–æ—Ä—Ç–∏–≤–Ω–∞—è —Ñ–æ—Ä–º–∞') || '';

  // Families labels (all families)
  const allFam = getLabelColumn_('Lists', 'D', 2);

  const partStart = shU.getLastRow() + 1;
  const partRows = [];
  // C002: explicitly mark 8 families as "–£—á–∞—Å—Ç–≤—É–µ—Ç"
  allFam.slice(0,8).forEach(lbl => partRows.push([c2Label, lbl, '–£—á–∞—Å—Ç–≤—É–µ—Ç', '']));
  // C003: exclude 2 families
  allFam.slice(0,2).forEach(lbl => partRows.push([c3Label, lbl, '–ù–µ —É—á–∞—Å—Ç–≤—É–µ—Ç', '']));
  if (partRows.length) {
    shU.getRange(partStart, 1, partRows.length, 4).setValues(partRows);
  }

  // Payments: mix across all collections
  const payStart = shP.getLastRow() + 1;
  const today = new Date();
  const addDays = (d) => new Date(today.getTime() + d*24*3600*1000);
  const payRows = [];

  // For C001 (static 500): 6 families pay full, 2 pay partial, 2 not yet
  allFam.slice(0,6).forEach((lbl,i) => payRows.push([toISO_(addDays(-5+i)), lbl, c1Label, 500, '–°–ë–ü', '–ü–æ–ª–Ω–∞—è –æ–ø–ª–∞—Ç–∞', '']));
  allFam.slice(6,8).forEach((lbl,i) => payRows.push([toISO_(addDays(-2-i)), lbl, c1Label, 300, '–∫–∞—Ä—Ç–∞', '–ß–∞—Å—Ç–∏—á–Ω–∞—è –æ–ø–ª–∞—Ç–∞', '']));

  // For C002 (shared 12000 among 8): 5 pay full share later, 3 partials
  const shareFamilies = allFam.slice(0,8);
  // let share = 12000 / shareFamilies.length; // —Ä–∞—Å—á—ë—Ç –≤ —Ñ–æ—Ä–º—É–ª–µ
  shareFamilies.slice(0,5).forEach((lbl,i) => payRows.push([toISO_(addDays(-3+i)), lbl, c2Label, 1500, '–°–ë–ü', '–ß–∞—Å—Ç–∏—á–Ω–æ/–ø–æ–ª–Ω–æ—Å—Ç—å—é', '']));
  shareFamilies.slice(5,8).forEach((lbl,i) => payRows.push([toISO_(addDays(-2-i)), lbl, c2Label, 800,  '–Ω–∞–ª–∏—á–Ω—ã–µ', '–ß–∞—Å—Ç–∏—á–Ω–æ', '']));

  // For C003 (dynamic 9000, excluding 2 families): –ø—Ä–∏–º–µ—Ä –∏–∑ README ‚Äî –ø–ª–∞—Ç–µ–∂–∏ [2000,2000,700,700,700,700,700]
  const dynFamilies = allFam.slice(2); // –ø–µ—Ä–≤—ã–µ –¥–≤–æ–µ –∏—Å–∫–ª—é—á–µ–Ω—ã
  dynFamilies.slice(0,2).forEach((lbl,i) => payRows.push([toISO_(addDays(-6+i)), lbl, c3Label, 2000, '–°–ë–ü', '–†–∞–Ω–Ω–∏–π –ø–ª–∞—Ç—ë–∂', '']));
  dynFamilies.slice(2,7).forEach((lbl,i) => payRows.push([toISO_(addDays(-1-i)), lbl, c3Label, 700,  '–∫–∞—Ä—Ç–∞', '–ü–æ–∑–∂–µ', '']));

  // For C004 (shared_total_by_payers 10000): 4 families pay; –Ω–∞—á–∏—Å–ª–µ–Ω–∏–µ –±—É–¥–µ—Ç T/K=2500 —Ç–æ–ª—å–∫–æ –∏–º
  if (c4Label) {
    allFam.slice(0,4).forEach((lbl,i) => payRows.push([toISO_(addDays(-4+i)), lbl, c4Label, 2500, i%2? '–∫–∞—Ä—Ç–∞':'–°–ë–ü', '–û–ø–ª–∞—Ç–∞ –¥–æ–ª–∏', '']));
  }

  // For C005 (proportional_by_payers 8000): 5 —Å–µ–º–µ–π –ø–ª–∞—Ç—è—Ç —Ä–∞–∑–Ω—ã–º–∏ —Å—É–º–º–∞–º–∏ (–±—É–¥–µ—Ç –ø—Ä–æ–ø–æ—Ä—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ —Å–ø–∏—Å–∞–Ω–∏–µ)
  if (c5Label) {
    const fams = allFam.slice(2,7);
    const amounts = [3000, 2000, 1500, 800, 500]; // —Å—É–º–º–∞—Ä–Ω–æ 7800 < T
    fams.forEach((lbl, i) => payRows.push([toISO_(addDays(-2+i)), lbl, c5Label, amounts[i], i%2 ? '–∫–∞—Ä—Ç–∞' : '–°–ë–ü', '–†–∞–∑–Ω—ã–µ —Å—É–º–º—ã', '']));
  }

  // For C006 (unit_price_by_payers T=15000, x=1500): –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –º—É–ª—å—Ç–∏-–µ–¥–∏–Ω–∏—Ü —É –æ–¥–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–ª—å—â–∏–∫–∞
  // –ü–ª–∞—Ç–µ–∂–∏: [1500,1500,1500,3000,4500,1500,700,700] ‚Üí –µ–¥–∏–Ω–∏—Ü –æ–ø–ª–∞—á–µ–Ω–æ = 9, —á–∞—Å—Ç–∏—á–Ω—ã–µ –Ω–µ —Ñ–æ—Ä–º–∏—Ä—É—é—Ç –Ω–∞—á–∏—Å–ª–µ–Ω–∏–µ
  if (c6Label) {
    const fams = allFam.slice(0,8);
    const amounts = [1500,1500,1500,3000,4500,1500,700,700];
    fams.forEach((lbl,i) => payRows.push([
      toISO_(addDays(-7+i)),
      lbl,
      c6Label,
      amounts[i],
      (i%2 ? '–∫–∞—Ä—Ç–∞' : '–°–ë–ü'),
      amounts[i] >= 1500 ? (amounts[i] % 1500 === 0 ? `${amounts[i]/1500} –µ–¥.` : '–ß–∞—Å—Ç–∏—á–Ω–æ') : '–ß–∞—Å—Ç–∏—á–Ω–æ',
      ''
    ]));
  }

  if (payRows.length) {
    shP.getRange(payStart, 1, payRows.length, shP.getLastColumn()).setValues(payRows);
  }

  // Generate IDs for payments
  if (mapP['payment_id']) fillMissingIds_(ss, '–ü–ª–∞—Ç–µ–∂–∏', mapP['payment_id'], 'PMT', 3);

  // Rebuild validations (if status/active were added)
  rebuildValidations();
}

/** helpers for sample data */
function getLabelColumn_(sheetName, colLetter, startRow) {
  const sh = SpreadsheetApp.getActive().getSheetByName(sheetName);
  const last = sh.getLastRow();
  if (last < startRow) return [];
  const rng = sh.getRange(`${colLetter}${startRow}:${colLetter}${last}`);
  return rng.getValues().map(r => String(r[0]||'')).filter(Boolean);
}
function toISO_(d) {
  const pad = (n) => String(n).padStart(2,'0');
  return `${d.getFullYear()}-${pad(d.getMonth()+1)}-${pad(d.getDate())}`;
}

/** =========================
 *  CUSTOM FUNCTIONS
 *  ========================= */

// LABEL_TO_ID("–ò–º—è (F001)") -> "F001" ; LABEL_TO_ID("F001")->"F001"
function LABEL_TO_ID(value) {
  return getIdFromLabelish_(value);
}

// Debug helper: shows detailed calculation for a collection and family
function DEBUG_COLLECTION_ACCRUAL(collectionId, familyId) {
  const ss = SpreadsheetApp.getActive();
  const shC = ss.getSheetByName('–°–±–æ—Ä—ã');
  const shP = ss.getSheetByName('–ü–ª–∞—Ç–µ–∂–∏');
  const shF = ss.getSheetByName('–°–µ–º—å–∏');
  const shU = ss.getSheetByName('–£—á–∞—Å—Ç–∏–µ');
  
  const mapC = getHeaderMap_(shC);
  const mapP = getHeaderMap_(shP);
  const mapF = getHeaderMap_(shF);
  const mapU = getHeaderMap_(shU);
  
  // Find collection
  const cRows = shC.getLastRow();
  let collectionData = null;
  if (cRows >= 2) {
    const C = shC.getRange(2, 1, cRows - 1, shC.getLastColumn()).getValues();
    const ch = shC.getRange(1,1,1,shC.getLastColumn()).getValues()[0];
    const ci={}; ch.forEach((h,idx)=>ci[h]=idx);
    for (const row of C) {
      if (String(row[ci['collection_id']]||'').trim() === collectionId) {
        collectionData = {
          id: collectionId,
          status: String(row[ci['–°—Ç–∞—Ç—É—Å']]||'').trim(),
          accrual: String(row[ci['–ù–∞—á–∏—Å–ª–µ–Ω–∏–µ']]||'').trim(),
          paramT: Number(row[ci['–ü–∞—Ä–∞–º–µ—Ç—Ä —Å—É–º–º—ã']]||0),
          fixedX: Number(row[ci['–§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π x']]||0)
        };
        break;
      }
    }
  }
  
  if (!collectionData) return 'Collection not found: ' + collectionId;
  
  // Get payments for this collection
  const payments = new Map();
  const pRows = shP.getLastRow();
  if (pRows >= 2) {
    const P = shP.getRange(2, 1, pRows - 1, shP.getLastColumn()).getValues();
    const ph = shP.getRange(1,1,1,shP.getLastColumn()).getValues()[0];
    const pi={}; ph.forEach((h,idx)=>pi[h]=idx);
    P.forEach(r=>{
      const col = getIdFromLabelish_(String(r[pi['collection_id (label)']]||''));
      const fam = getIdFromLabelish_(String(r[pi['family_id (label)']]||''));
      const sum = Number(r[pi['–°—É–º–º–∞']]||0);
      if (col === collectionId && fam && sum > 0) {
        payments.set(fam, (payments.get(fam)||0) + sum);
      }
    });
  }
  
  const paymentArray = Array.from(payments.values());
  const familyPayment = payments.get(familyId) || 0;
  
  let result = `Collection: ${collectionId}\n`;
  result += `Mode: ${collectionData.accrual}\n`;
  result += `Target T: ${collectionData.paramT}\n`;
  result += `Fixed X: ${collectionData.fixedX}\n`;
  result += `Status: ${collectionData.status}\n`;
  result += `All payments: [${paymentArray.join(', ')}]\n`;
  result += `Family ${familyId} payment: ${familyPayment}\n`;
  
  if (collectionData.accrual === 'dynamic_by_payers') {
    const x = collectionData.fixedX > 0 ? collectionData.fixedX : DYN_CAP_(collectionData.paramT, paymentArray);
    result += `Calculated x: ${x}\n`;
    result += `Family accrual: min(${familyPayment}, ${x}) = ${Math.min(familyPayment, x)}\n`;
    
    // Verify total
    let total = 0;
    payments.forEach((pay) => total += Math.min(pay, x));
    result += `Total distributed: ${total}\n`;
  }
  
  return result;
}

// Sum of all payments by a family (all collections)
function PAYED_TOTAL_FAMILY(familyLabelOrId) {
  const famId = getIdFromLabelish_(familyLabelOrId);
  if (!famId) return 0;
  const ss = SpreadsheetApp.getActive();
  const shPay = ss.getSheetByName('–ü–ª–∞—Ç–µ–∂–∏');
  const rows = shPay.getLastRow();
  if (rows < 2) return 0;
  const map = getHeaderMap_(shPay);
  const iFam = map['family_id (label)'];
  const iSum = map['–°—É–º–º–∞'];
  if (!iFam || !iSum) return 0;
  const vals = shPay.getRange(2, 1, rows - 1, shPay.getLastColumn()).getValues();
  let total = 0;
  vals.forEach(r => {
    const fid = getIdFromLabelish_(String(r[iFam-1]||''));
    const sum = Number(r[iSum-1]||0);
    if (fid === famId && sum > 0) total += sum;
  });
  return round2_(total);
}

/** Accrued total for a family across collections. statusFilter: "OPEN" (default) or "ALL" */
function ACCRUED_FAMILY(familyLabelOrId, statusFilter) {
  const famId = getIdFromLabelish_(familyLabelOrId);
  if (!famId) return 0;
  const onlyOpen = String(statusFilter||'OPEN').toUpperCase() !== 'ALL';
  const ss = SpreadsheetApp.getActive();
  const shF = ss.getSheetByName('–°–µ–º—å–∏');
  const shC = ss.getSheetByName('–°–±–æ—Ä—ã');
  const shU = ss.getSheetByName('–£—á–∞—Å—Ç–∏–µ');
  const shP = ss.getSheetByName('–ü–ª–∞—Ç–µ–∂–∏');

  const mapF = getHeaderMap_(shF);
  const mapC = getHeaderMap_(shC);
  const mapU = getHeaderMap_(shU);
  const mapP = getHeaderMap_(shP);

  // Active families
  const famRows = shF.getLastRow();
  const activeFam = new Set();
  if (famRows >= 2) {
    const vals = shF.getRange(2, 1, famRows - 1, shF.getLastColumn()).getValues();
    const headers = shF.getRange(1,1,1,shF.getLastColumn()).getValues()[0];
    const i = {}; headers.forEach((h,idx)=>i[h]=idx);
    vals.forEach(r=>{
      const id = String(r[i['family_id']]||'').trim();
      const act = String(r[i['–ê–∫—Ç–∏–≤–µ–Ω']]||'').trim()==='–î–∞';
      if (id && act) activeFam.add(id);
    });
  }

  // Participation
  const partByCol = new Map(); // colId -> {hasInclude, include:Set, exclude:Set}
  const uRows = shU.getLastRow();
  if (uRows >= 2) {
    const U = shU.getRange(2, 1, uRows - 1, shU.getLastColumn()).getValues();
    const uh = shU.getRange(1,1,1,shU.getLastColumn()).getValues()[0];
    const ui={}; uh.forEach((h,idx)=>ui[h]=idx);
    U.forEach(r=>{
      const col = getIdFromLabelish_(String(r[ui['collection_id (label)']]||''));
      const fam = getIdFromLabelish_(String(r[ui['family_id (label)']]||''));
      const st  = String(r[ui['–°—Ç–∞—Ç—É—Å']]||'').trim();
      if (!col || !fam) return;
      if (!partByCol.has(col)) partByCol.set(col, {hasInclude:false, include:new Set(), exclude:new Set()});
      const obj = partByCol.get(col);
      if (st === '–£—á–∞—Å—Ç–≤—É–µ—Ç') { obj.hasInclude = true; obj.include.add(fam); }
      else if (st === '–ù–µ —É—á–∞—Å—Ç–≤—É–µ—Ç') { obj.exclude.add(fam); }
    });
  }

  // Payments grouped: collection -> Map(fam->sum)
  const payByCol = new Map();
  const pRows = shP.getLastRow();
  if (pRows >= 2) {
    const P = shP.getRange(2, 1, pRows - 1, shP.getLastColumn()).getValues();
    const ph = shP.getRange(1,1,1,shP.getLastColumn()).getValues()[0];
    const pi={}; ph.forEach((h,idx)=>pi[h]=idx);
    P.forEach(r=>{
      const col = getIdFromLabelish_(String(r[pi['collection_id (label)']]||''));
      const fam = getIdFromLabelish_(String(r[pi['family_id (label)']]||''));
      const sum = Number(r[pi['–°—É–º–º–∞']]||0);
      if (!col || !fam || sum <= 0) return;
      if (!payByCol.has(col)) payByCol.set(col, new Map());
      const m = payByCol.get(col);
      m.set(fam, (m.get(fam)||0) + sum);
    });
  }

  // Iterate collections
  let total = 0;
  const cRows = shC.getLastRow();
  if (cRows >= 2) {
    const C = shC.getRange(2, 1, cRows - 1, shC.getLastColumn()).getValues();
    const ch = shC.getRange(1,1,1,shC.getLastColumn()).getValues()[0];
    const ci={}; ch.forEach((h,idx)=>ci[h]=idx);
    C.forEach(row=>{
      const colId   = String(row[ci['collection_id']]||'').trim();
      const status  = String(row[ci['–°—Ç–∞—Ç—É—Å']]||'').trim();
      const accrual = String(row[ci['–ù–∞—á–∏—Å–ª–µ–Ω–∏–µ']]||'').trim();
      const paramT  = Number(row[ci['–ü–∞—Ä–∞–º–µ—Ç—Ä —Å—É–º–º—ã']]||0);
      const fixedX  = Number(row[ci['–§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π x']]||0);
      if (!colId) return;
      if (onlyOpen && status !== '–û—Ç–∫—Ä—ã—Ç') return;

      // participants
      const p = partByCol.get(colId);
      const participants = new Set();
      if (p && p.hasInclude) p.include.forEach(f=>participants.add(f));
      else activeFam.forEach(f=>participants.add(f));
      if (p) p.exclude.forEach(f=>participants.delete(f));

      // Fallback: if no participants resolved (e.g., header mismatch), use payers for this collection
      const famPays = (payByCol.get(colId) || new Map());
      if (participants.size === 0) {
        famPays.forEach((_, fid)=>participants.add(fid));
      }

      const n = participants.size;
      const Pi = famPays.get(famId) || 0;

      let accrued = 0;
      if (accrual === 'static_per_child') {
        accrued = participants.has(famId) ? paramT : 0;
      } else if (accrual === 'shared_total_all') {
        if (n > 0 && participants.has(famId)) accrued = paramT / n;
      } else if (accrual === 'shared_total_by_payers') {
        // Share T equally among payers (within participants)
        const payers = [];
        (payByCol.get(colId) || new Map()).forEach((sum, fid)=>{ if (participants.has(fid) && sum>0) payers.push(fid); });
        const k = payers.length;
        if (k > 0 && participants.has(famId) && Pi > 0) accrued = paramT / k; else accrued = 0;
      } else if (accrual === 'dynamic_by_payers') {
        if (participants.has(famId) && n > 0) {
          // payments of participants only
          const payments = [];
          famPays.forEach((sum, fid)=>{ if (participants.has(fid) && sum>0) payments.push(sum); });
          const x = fixedX > 0 ? fixedX : DYN_CAP_(paramT, payments);
          accrued = Math.min(Pi, x);
        }
      } else if (accrual === 'proportional_by_payers') {
        // Accrue proportionally to payments among participants, capping total at T.
        if (participants.has(famId)) {
          // Sum of payments among participants
          let sumP = 0;
          famPays.forEach((sum, fid)=>{ if (participants.has(fid) && sum>0) sumP += sum; });
          if (sumP <= 0) {
            accrued = 0;
          } else {
            const target = Math.min(paramT, sumP);
            const ratio = target / sumP; // <= 1
            accrued = Pi > 0 ? (Pi * ratio) : 0;
          }
        }
      } else if (accrual === 'unit_price_by_payers') {
            // Per payer multiple units allowed: accrue full units only, floor(Pi/x)*x; partial < x remains –∫–∞–∫ –ø–µ—Ä–µ–ø–ª–∞—Ç–∞ –±–µ–∑ –¥–æ–ª–≥–∞
            const x = fixedX > 0 ? fixedX : 0;
            if (participants.has(famId) && x > 0) {
              accrued = Math.floor(Pi / x) * x;
            } else {
              accrued = 0;
            }
      }
      total += accrued;
    });
  }
  return round2_(total);
}

/** Returns per-collection accrual breakdown for a family (for debugging). statusFilter: "OPEN" (default) or "ALL" */
function ACCRUED_BREAKDOWN(familyLabelOrId, statusFilter) {
  const famId = getIdFromLabelish_(familyLabelOrId);
  if (!famId) return [['collection_id','accrued']];
  const onlyOpen = String(statusFilter||'OPEN').toUpperCase() !== 'ALL';
  const ss = SpreadsheetApp.getActive();
  const shF = ss.getSheetByName('–°–µ–º—å–∏');
  const shC = ss.getSheetByName('–°–±–æ—Ä—ã');
  const shU = ss.getSheetByName('–£—á–∞—Å—Ç–∏–µ');
  const shP = ss.getSheetByName('–ü–ª–∞—Ç–µ–∂–∏');

  const mapF = getHeaderMap_(shF);
  const mapC = getHeaderMap_(shC);
  const mapU = getHeaderMap_(shU);
  const mapP = getHeaderMap_(shP);

  // Active families
  const famRows = shF.getLastRow();
  const activeFam = new Set();
  if (famRows >= 2) {
    const vals = shF.getRange(2, 1, famRows - 1, shF.getLastColumn()).getValues();
    const headers = shF.getRange(1,1,1,shF.getLastColumn()).getValues()[0];
    const i = {}; headers.forEach((h,idx)=>i[h]=idx);
    vals.forEach(r=>{
      const id = String(r[i['family_id']]||'').trim();
      const act = String(r[i['–ê–∫—Ç–∏–≤–µ–Ω']]||'').trim()==='–î–∞';
      if (id && act) activeFam.add(id);
    });
  }

  // Participation
  const partByCol = new Map();
  const uRows = shU.getLastRow();
  if (uRows >= 2) {
    const U = shU.getRange(2, 1, uRows - 1, shU.getLastColumn()).getValues();
    const uh = shU.getRange(1,1,1,shU.getLastColumn()).getValues()[0];
    const ui={}; uh.forEach((h,idx)=>ui[h]=idx);
    U.forEach(r=>{
      const col = getIdFromLabelish_(String(r[ui['collection_id (label)']]||''));
      const fam = getIdFromLabelish_(String(r[ui['family_id (label)']]||''));
      const st  = String(r[ui['–°—Ç–∞—Ç—É—Å']]||'').trim();
      if (!col || !fam) return;
      if (!partByCol.has(col)) partByCol.set(col, {hasInclude:false, include:new Set(), exclude:new Set()});
      const obj = partByCol.get(col);
      if (st === '–£—á–∞—Å—Ç–≤—É–µ—Ç') { obj.hasInclude = true; obj.include.add(fam); }
      else if (st === '–ù–µ —É—á–∞—Å—Ç–≤—É–µ—Ç') { obj.exclude.add(fam); }
    });
  }

  // Payments grouped: collection -> Map(fam->sum)
  const payByCol = new Map();
  const pRows = shP.getLastRow();
  if (pRows >= 2) {
    const P = shP.getRange(2, 1, pRows - 1, shP.getLastColumn()).getValues();
    const ph = shP.getRange(1,1,1,shP.getLastColumn()).getValues()[0];
    const pi={}; ph.forEach((h,idx)=>pi[h]=idx);
    P.forEach(r=>{
      const col = getIdFromLabelish_(String(r[pi['collection_id (label)']]||''));
      const fam = getIdFromLabelish_(String(r[pi['family_id (label)']]||''));
      const sum = Number(r[pi['–°—É–º–º–∞']]||0);
      if (!col || !fam || sum <= 0) return;
      if (!payByCol.has(col)) payByCol.set(col, new Map());
      const m = payByCol.get(col);
      m.set(fam, (m.get(fam)||0) + sum);
    });
  }

  const out = [['collection_id','accrued']];
  const cRows = shC.getLastRow();
  if (cRows >= 2) {
    const C = shC.getRange(2, 1, cRows - 1, shC.getLastColumn()).getValues();
    const ch = shC.getRange(1,1,1,shC.getLastColumn()).getValues()[0];
    const ci={}; ch.forEach((h,idx)=>ci[h]=idx);
    C.forEach(row=>{
      const colId   = String(row[ci['collection_id']]||'').trim();
      const status  = String(row[ci['–°—Ç–∞—Ç—É—Å']]||'').trim();
      const accrual = String(row[ci['–ù–∞—á–∏—Å–ª–µ–Ω–∏–µ']]||'').trim();
      const paramT  = Number(row[ci['–ü–∞—Ä–∞–º–µ—Ç—Ä —Å—É–º–º—ã']]||0);
      const fixedX  = Number(row[ci['–§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π x']]||0);
      if (!colId) return;
      if (onlyOpen && status !== '–û—Ç–∫—Ä—ã—Ç') return; // respect filter

      // participants
      const p = partByCol.get(colId);
      const participants = new Set();
      if (p && p.hasInclude) p.include.forEach(f=>participants.add(f));
      else activeFam.forEach(f=>participants.add(f));
      if (p) p.exclude.forEach(f=>participants.delete(f));

      // Fallback: payers as participants if empty
      const famPays = (payByCol.get(colId) || new Map());
      if (participants.size === 0) famPays.forEach((_, fid)=>participants.add(fid));

      const n = participants.size;
      const Pi = famPays.get(famId) || 0;
      let accrued = 0;
      if (accrual === 'static_per_child') {
        accrued = participants.has(famId) ? paramT : 0;
      } else if (accrual === 'shared_total_all') {
        if (n > 0 && participants.has(famId)) accrued = paramT / n;
      } else if (accrual === 'shared_total_by_payers') {
        const payers = [];
        famPays.forEach((sum, fid)=>{ if (participants.has(fid) && sum>0) payers.push(fid); });
        const k = payers.length;
        if (k > 0 && participants.has(famId) && (famPays.get(famId)||0) > 0) accrued = paramT / k; else accrued = 0;
      } else if (accrual === 'dynamic_by_payers') {
        if (participants.has(famId) && n > 0) {
          const payments = [];
          famPays.forEach((sum, fid)=>{ if (participants.has(fid) && sum>0) payments.push(sum); });
          const x = fixedX > 0 ? fixedX : DYN_CAP_(paramT, payments);
          accrued = Math.min(Pi, x);
        }
      }
      if (accrued !== 0) out.push([colId, round2_(accrued)]);
    });
  }
  return out;
}

/** =========================
 *  DYNAMIC CAP
 *  ========================= */
function DYN_CAP(T, payments_range) {
  if (T === null || T === '' || isNaN(T)) return 0;
  const flat = flatten_(payments_range).map(Number).filter(v => isFinite(v) && v > 0);
  if (!flat.length) return 0;
  flat.sort((a,b)=>a-b);
  const n = flat.length;
  const sum = flat.reduce((a,b)=>a+b,0);
  const target = Math.min(T, sum);
  if (target <= 0) return 0;
  let cumsum = 0;
  for (let k = 0; k < n; k++) {
    const next = flat[k];
    const remain = n - k;
    const candidate = (target - cumsum) / remain;
    if (candidate <= next) return round6_(candidate);
    cumsum += next;
  }
  return round6_((target - (cumsum - flat[n-1])) / 1);
}
function DYN_CAP_(T, payments) {
  if (!T || !isFinite(T)) return 0;
  const arr = (payments || []).map(Number).filter(v => v > 0 && isFinite(v));
  if (!arr.length) return 0;
  arr.sort((a,b)=>a-b);
  const n = arr.length;
  const sum = arr.reduce((a,b)=>a+b,0);
  const target = Math.min(T, sum);
  if (target <= 0) return 0;
  
  // Debug logging
  Logger.log(`DYN_CAP_: T=${T}, payments=[${arr.join(',')}], target=${target}`);
  
  let cumsum = 0;
  for (let k = 0; k < n; k++) {
    const next = arr[k];
    const remain = n - k;
    const candidate = (target - cumsum) / remain;
    Logger.log(`Step ${k}: next=${next}, remain=${remain}, candidate=${candidate}, cumsum=${cumsum}`);
    if (candidate <= next) {
      Logger.log(`Found x=${candidate}`);
      return round6_(candidate);
    }
    cumsum += next;
  }
  const final = round6_((target - (cumsum - arr[n-1])) / 1);
  Logger.log(`Final x=${final}`);
  return final;
}

/** =========================
 *  UTILS
 *  ========================= */
function getIdFromLabelish_(v) {
  const s = String(v || '').trim();
  if (!s) return '';
  const m = s.match(/\(([^)]+)\)\s*$/);
  return m ? m[1] : s; // if label "Name (ID)" -> ID; else assume it's already ID
}
function flatten_(arr){ const out=[];(arr||[]).forEach(r=>Array.isArray(r)?r.forEach(c=>out.push(c)):out.push(r));return out; }
// Debug what's being calculated in Balance
function DEBUG_BALANCE_ACCRUAL(familyId) {
  const ss = SpreadsheetApp.getActive();
  const shBal = ss.getSheetByName('–ë–∞–ª–∞–Ω—Å');
  const selector = String(shBal.getRange('I1').getValue() || 'ALL').toUpperCase();
  
  let result = `Family: ${familyId}\n`;
  result += `Selector: ${selector}\n`;
  result += `ACCRUED_FAMILY result: ${ACCRUED_FAMILY(familyId, selector)}\n`;
  result += `Breakdown:\n`;
  
  const breakdown = ACCRUED_BREAKDOWN(familyId, selector);
  for (let i = 1; i < breakdown.length; i++) {
    result += `  ${breakdown[i][0]}: ${breakdown[i][1]}\n`;
  }
  
  return result;
}

// Test function for debugging
function TEST_DYN_CAP() {
  const result1 = DYN_CAP_(500, [2000, 1333]);
  Logger.log(`Test 1: DYN_CAP_(500, [2000, 1333]) = ${result1}`);
  
  const result2 = DYN_CAP_(500, [1333, 2000]);
  Logger.log(`Test 2: DYN_CAP_(500, [1333, 2000]) = ${result2}`);
  
  return `Result1: ${result1}, Result2: ${result2}`;
}

function round6_(x){ return Math.round((x + Number.EPSILON) * 1e6) / 1e6; }
function round2_(x){ return Math.round((x + Number.EPSILON) * 100) / 100; }
function toastErr_(msg){ SpreadsheetApp.getActive().toast(msg, 'Funds (error)', 5); }

/** Generate detailed payment/accrual breakdown for all families and collections (batched, optimized) */
function GENERATE_DETAIL_BREAKDOWN(statusFilter, tick) {
  const onlyOpen = String(statusFilter||'OPEN').toUpperCase() !== 'ALL';
  const ss = SpreadsheetApp.getActive();
  const shF = ss.getSheetByName('–°–µ–º—å–∏');
  const shC = ss.getSheetByName('–°–±–æ—Ä—ã');
  const shU = ss.getSheetByName('–£—á–∞—Å—Ç–∏–µ');
  const shP = ss.getSheetByName('–ü–ª–∞—Ç–µ–∂–∏');

  // Read headers once
  const mapF = getHeaderMap_(shF);
  const mapC = getHeaderMap_(shC);
  const mapU = getHeaderMap_(shU);
  const mapP = getHeaderMap_(shP);

  // Families: id -> {name, active}
  const families = new Map();
  const famRows = shF.getLastRow();
  if (famRows >= 2) {
    const F = shF.getRange(2, 1, famRows - 1, shF.getLastColumn()).getValues();
    const fi = {}; shF.getRange(1,1,1,shF.getLastColumn()).getValues()[0].forEach((h,idx)=>fi[h]=idx);
    F.forEach(r => {
      const id = String(r[fi['family_id']]||'').trim();
      if (!id) return;
      const name = String(r[fi['–†–µ–±—ë–Ω–æ–∫ –§–ò–û']]||'').trim();
      const active = String(r[fi['–ê–∫—Ç–∏–≤–µ–Ω']]||'').trim() === '–î–∞';
      families.set(id, {name, active});
    });
  }

  // Collections: id -> {name, status, accrual, T, fixedX}
  const collections = new Map();
  const cRows = shC.getLastRow();
  if (cRows >= 2) {
    const C = shC.getRange(2, 1, cRows - 1, shC.getLastColumn()).getValues();
    const ci = {}; shC.getRange(1,1,1,shC.getLastColumn()).getValues()[0].forEach((h,idx)=>ci[h]=idx);
    C.forEach(row => {
      const colId = String(row[ci['collection_id']]||'').trim();
      if (!colId) return;
      const status  = String(row[ci['–°—Ç–∞—Ç—É—Å']]||'').trim();
      if (onlyOpen && status !== '–û—Ç–∫—Ä—ã—Ç') return;
      const accrual = String(row[ci['–ù–∞—á–∏—Å–ª–µ–Ω–∏–µ']]||'').trim();
      const name    = String(row[ci['–ù–∞–∑–≤–∞–Ω–∏–µ —Å–±–æ—Ä–∞']]||'').trim();
      const paramT  = Number(row[ci['–ü–∞—Ä–∞–º–µ—Ç—Ä —Å—É–º–º—ã']]||0);
      const fixedX  = Number(row[ci['–§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π x']]||0);
      collections.set(colId, {name, status, accrual, T: paramT, fixedX});
    });
  }

  if (collections.size === 0 || families.size === 0) return [['','','','','','','','','','']];

  // Participation: per collection
  const partByCol = new Map(); // colId -> {hasInclude, include:Set, exclude:Set}
  const uRows = shU.getLastRow();
  if (uRows >= 2) {
    const U = shU.getRange(2, 1, uRows - 1, shU.getLastColumn()).getValues();
    const ui = {}; shU.getRange(1,1,1,shU.getLastColumn()).getValues()[0].forEach((h,idx)=>ui[h]=idx);
    U.forEach(r => {
      const col = getIdFromLabelish_(String(r[ui['collection_id (label)']]||''));
      const fam = getIdFromLabelish_(String(r[ui['family_id (label)']]||''));
      const st  = String(r[ui['–°—Ç–∞—Ç—É—Å']]||'').trim();
      if (!collections.has(col) || !fam) return;
      if (!partByCol.has(col)) partByCol.set(col, {hasInclude:false, include:new Set(), exclude:new Set()});
      const obj = partByCol.get(col);
      if (st === '–£—á–∞—Å—Ç–≤—É–µ—Ç') { obj.hasInclude = true; obj.include.add(fam); }
      else if (st === '–ù–µ —É—á–∞—Å—Ç–≤—É–µ—Ç') { obj.exclude.add(fam); }
    });
  }

  // Payments: per collection -> Map(famId -> sum)
  const payByCol = new Map();
  const pRows = shP.getLastRow();
  if (pRows >= 2) {
    const P = shP.getRange(2, 1, pRows - 1, shP.getLastColumn()).getValues();
    const pi = {}; shP.getRange(1,1,1,shP.getLastColumn()).getValues()[0].forEach((h,idx)=>pi[h]=idx);
    P.forEach(r => {
      const col = getIdFromLabelish_(String(r[pi['collection_id (label)']]||''));
      const fam = getIdFromLabelish_(String(r[pi['family_id (label)']]||''));
      const sum = Number(r[pi['–°—É–º–º–∞']]||0);
      if (!collections.has(col) || !fam || !(sum > 0)) return;
      if (!payByCol.has(col)) payByCol.set(col, new Map());
      const m = payByCol.get(col);
      m.set(fam, (m.get(fam)||0) + sum);
    });
  }

  // Build participants per collection
  const participantsByCol = new Map(); // colId -> Set(famId)
  collections.forEach((col, colId) => {
    const p = partByCol.get(colId);
    const set = new Set();
    if (p && p.hasInclude) p.include.forEach(f => set.add(f));
    else {
      // all active families by default
      families.forEach((info, fid) => { if (info.active) set.add(fid); });
    }
    if (p) p.exclude.forEach(f => set.delete(f));
    // Fallback: if empty, use payers for this collection
    if (set.size === 0 && payByCol.has(colId)) payByCol.get(colId).forEach((_, fid) => set.add(fid));
    participantsByCol.set(colId, set);
  });

  // Compute rows
  const out = [];
  collections.forEach((col, colId) => {
    const name = col.name;
    const accrual = col.accrual;
    const T = col.T;
    const fixedX = col.fixedX || 0;
    const participants = participantsByCol.get(colId) || new Set();
    const famPays = payByCol.get(colId) || new Map();

    // Pre-compute x for dynamic_by_payers
    let x = 0;
    if (accrual === 'dynamic_by_payers') {
      if (fixedX > 0) x = fixedX;
      else {
        const arr = [];
        famPays.forEach((sum, fid) => { if (participants.has(fid) && sum > 0) arr.push(sum); });
        x = DYN_CAP_(T, arr);
      }
    }

  // Pre-compute K for shared_total_by_payers
    let kPayers = 0;
    if (accrual === 'shared_total_by_payers') {
      famPays.forEach((sum, fid) => { if (participants.has(fid) && sum > 0) kPayers++; });
    }

    // Iterate only over union(participants, payers)
    const famSet = new Set();
    participants.forEach(fid => famSet.add(fid));
    famPays.forEach((_, fid) => famSet.add(fid));

    famSet.forEach(fid => {
      const fam = families.get(fid);
      const paid = famPays.get(fid) || 0;
      let accrued = 0;
      if (accrual === 'static_per_child') {
        accrued = participants.has(fid) ? T : 0;
      } else if (accrual === 'shared_total_all') {
        const n = participants.size;
        accrued = (n > 0 && participants.has(fid)) ? (T / n) : 0;
      } else if (accrual === 'shared_total_by_payers') {
        accrued = (kPayers > 0 && participants.has(fid) && paid > 0) ? (T / kPayers) : 0;
      } else if (accrual === 'dynamic_by_payers') {
        if (participants.has(fid) && x > 0) {
          const Pi = paid;
          accrued = Math.min(Pi, x);
        } else {
          accrued = 0;
        }
      } else if (accrual === 'proportional_by_payers') {
        if (participants.has(fid)) {
          let sumP = 0;
          famPays.forEach((sum, f2) => { if (participants.has(f2) && sum > 0) sumP += sum; });
          if (sumP > 0) {
            const target = Math.min(T, sumP);
            const ratio = target / sumP;
            accrued = paid > 0 ? (paid * ratio) : 0;
          } else {
            accrued = 0;
          }
        }
      } else if (accrual === 'unit_price_by_payers') {
      const x = fixedX > 0 ? fixedX : 0;
      accrued = (participants.has(fid) && x > 0) ? (Math.floor(paid / x) * x) : 0;
      }
      if (paid > 0 || accrued > 0) {
        out.push([
          fid,
          fam ? fam.name : '',
          colId,
          name,
          round2_(paid),
          round2_(accrued),
          round2_(paid - accrued),
          accrual
        ]);
      }
    });
  });

  return out.length ? out : [['','','','','','','','']];
}

/** Generate per-collection summary: [collection_id, name, mode, T_total, collected, K_payers, K_needed_more, remaining] */
function GENERATE_COLLECTION_SUMMARY(statusFilter, tick) {
  const statusNorm = String(statusFilter||'OPEN').toUpperCase();
  const onlyOpen = statusNorm !== 'ALL';
  const ss = SpreadsheetApp.getActive();
  const shF = ss.getSheetByName('–°–µ–º—å–∏');
  const shC = ss.getSheetByName('–°–±–æ—Ä—ã');
  const shU = ss.getSheetByName('–£—á–∞—Å—Ç–∏–µ');
  const shP = ss.getSheetByName('–ü–ª–∞—Ç–µ–∂–∏');

  const mapF = getHeaderMap_(shF);
  const mapC = getHeaderMap_(shC);
  const mapU = getHeaderMap_(shU);
  const mapP = getHeaderMap_(shP);

  // Families: id -> active
  const families = new Map();
  if (shF.getLastRow() >= 2) {
    const F = shF.getRange(2, 1, shF.getLastRow()-1, shF.getLastColumn()).getValues();
    const fi = {}; shF.getRange(1,1,1,shF.getLastColumn()).getValues()[0].forEach((h,idx)=>fi[h]=idx);
    F.forEach(r => {
      const id = String(r[fi['family_id']]||'').trim();
      if (!id) return;
      const active = String(r[fi['–ê–∫—Ç–∏–≤–µ–Ω']]||'').trim() === '–î–∞';
      const name = String(r[fi['–†–µ–±—ë–Ω–æ–∫ –§–ò–û']]||'').trim();
      families.set(id, {active, name});
    });
  }

  // Collections
  const collections = [];
  if (shC.getLastRow() >= 2) {
    const C = shC.getRange(2, 1, shC.getLastRow()-1, shC.getLastColumn()).getValues();
    const ci = {}; shC.getRange(1,1,1,shC.getLastColumn()).getValues()[0].forEach((h,idx)=>ci[h]=idx);
    C.forEach(row => {
      const id = String(row[ci['collection_id']]||'').trim(); if (!id) return;
      const status = String(row[ci['–°—Ç–∞—Ç—É—Å']]||'').trim();
      const name = String(row[ci['–ù–∞–∑–≤–∞–Ω–∏–µ —Å–±–æ—Ä–∞']]||'').trim();
      const mode = String(row[ci['–ù–∞—á–∏—Å–ª–µ–Ω–∏–µ']]||'').trim();
      const T = Number(row[ci['–ü–∞—Ä–∞–º–µ—Ç—Ä —Å—É–º–º—ã']]||0);
      const fixedX = Number(row[ci['–§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π x']]||0);
      collections.push({id, name, mode, T, fixedX, status});
    });
  }
  // Filter by status for OPEN mode
  let collectionsToProcess = collections;
  if (onlyOpen) collectionsToProcess = collections.filter(c => c.status === '–û—Ç–∫—Ä—ã—Ç');
  if (!collectionsToProcess.length) return [['','','','','','','','','','']];

  // Participation
  const partByCol = new Map();
  if (shU.getLastRow() >= 2) {
    const U = shU.getRange(2, 1, shU.getLastRow()-1, shU.getLastColumn()).getValues();
    const ui = {}; shU.getRange(1,1,1,shU.getLastColumn()).getValues()[0].forEach((h,idx)=>ui[h]=idx);
    U.forEach(r => {
      const col = getIdFromLabelish_(String(r[ui['collection_id (label)']]||''));
      const fam = getIdFromLabelish_(String(r[ui['family_id (label)']]||''));
      const st = String(r[ui['–°—Ç–∞—Ç—É—Å']]||'').trim();
      if (!col || !fam) return;
      if (!partByCol.has(col)) partByCol.set(col, {hasInclude:false, include:new Set(), exclude:new Set()});
      const obj = partByCol.get(col);
      if (st === '–£—á–∞—Å—Ç–≤—É–µ—Ç') { obj.hasInclude = true; obj.include.add(fam); }
      else if (st === '–ù–µ —É—á–∞—Å—Ç–≤—É–µ—Ç') { obj.exclude.add(fam); }
    });
  }

  // Payments grouped
  const payByCol = new Map();
  if (shP.getLastRow() >= 2) {
    const P = shP.getRange(2, 1, shP.getLastRow()-1, shP.getLastColumn()).getValues();
    const pi = {}; shP.getRange(1,1,1,shP.getLastColumn()).getValues()[0].forEach((h,idx)=>pi[h]=idx);
    P.forEach(r => {
      const col = getIdFromLabelish_(String(r[pi['collection_id (label)']]||''));
      const fam = getIdFromLabelish_(String(r[pi['family_id (label)']]||''));
      const sum = Number(r[pi['–°—É–º–º–∞']]||0);
      if (!col || !fam || !(sum>0)) return;
      if (!payByCol.has(col)) payByCol.set(col, new Map());
      const m = payByCol.get(col);
      m.set(fam, (m.get(fam)||0) + sum);
    });
  }

  const buildRow = (col) => {
    const {id, name, mode, T, fixedX} = col;
    // participants
    const p = partByCol.get(id);
    const participants = new Set();
    if (p && p.hasInclude) p.include.forEach(fid=>participants.add(fid));
    else families.forEach((v,fid)=>{ if (v.active) participants.add(fid); });
    if (p) p.exclude.forEach(fid=>participants.delete(fid));
    // Fallback: if none resolved, use payers as participants
    if (participants.size === 0 && payByCol.has(id)) payByCol.get(id).forEach((_,fid)=>participants.add(fid));

    const famPays = payByCol.get(id) || new Map();
  // Collected from participants only
    let collected = 0; let K = 0;
    famPays.forEach((sum, fid)=>{ if (participants.has(fid)) { collected += sum; if (sum>0) K++; } });
    // Units paid for unit_price_by_payers
    let unitsPaid = '';
    if (mode === 'unit_price_by_payers') {
      const x = (fixedX > 0) ? fixedX : 0;
      if (x > 0) unitsPaid = Math.floor(collected / x);
    }

    // Target total
    let Ttotal = 0;
    if (mode === 'static_per_child') {
      Ttotal = (participants.size || 0) * (T || 0);
    } else {
      Ttotal = T || 0;
    }
    Ttotal = Number(Ttotal) || 0;
    const remaining = Math.max(0, round2_(Ttotal - collected));

    // Estimate additional payers needed
    let needMore = '';
    if (remaining <= 0) {
      needMore = 0;
    } else if (mode === 'static_per_child') {
      const rate = T || 0;
      needMore = rate > 0 ? Math.ceil(remaining / rate) : '';
    } else if (mode === 'shared_total_all') {
      const n = participants.size || 0;
      const share = (n > 0) ? (T / n) : 0;
      needMore = share > 0 ? Math.ceil(remaining / share) : '';
    } else if (mode === 'shared_total_by_payers') {
      const share = fixedX > 0 ? fixedX : (K > 0 ? (T / K) : 0);
      needMore = share > 0 ? Math.ceil(remaining / share) : '';
    } else if (mode === 'dynamic_by_payers') {
      // if x fixed (closed), estimate by x; else leave blank
      needMore = fixedX > 0 ? Math.ceil(remaining / fixedX) : '';
    } else if (mode === 'proportional_by_payers') {
      // Not applicable: proportional redistribution among payers; no discrete payers needed metric
      needMore = '';
    } else if (mode === 'unit_price_by_payers') {
      const x = fixedX > 0 ? fixedX : 0;
      needMore = x > 0 ? Math.ceil(remaining / x) : '';
    } else {
      needMore = '';
    }

  // For unit_price_by_payers we output both K (unique payers) and UnitsPaid separately

    return [
      id,
      name,
      mode,
  round2_(Ttotal),
  round2_(collected),
  // Participants:
  (mode === 'unit_price_by_payers' ? (fixedX>0 ? Math.ceil((T||0)/fixedX) : participants.size) : participants.size),
  // Unique payers (K)
  K,
  // Units paid (for unit_price_by_payers) or blank otherwise
  (mode === 'unit_price_by_payers' ? (unitsPaid === '' ? '' : unitsPaid) : ''),
  needMore,
  round2_(remaining)
    ];
  };

  const out = [];
  if (statusNorm === 'ALL') {
    // Open first
    const openRows = collections.filter(c => c.status === '–û—Ç–∫—Ä—ã—Ç').map(buildRow);
    const closedRows = collections.filter(c => c.status !== '–û—Ç–∫—Ä—ã—Ç').map(buildRow);
    // Insert section headers as single labeled rows for clarity
  if (openRows.length) out.push(['','–û–¢–ö–†–´–¢–´–ï –°–ë–û–†–´','','','','','','','','']);
    Array.prototype.push.apply(out, openRows);
  // Add visual separation: 5 empty rows between open and closed sections
  for (let i = 0; i < 5; i++) out.push(['','','','','','','','','','']);
  if (closedRows.length) out.push(['','–ó–ê–ö–†–´–¢–´–ï –°–ë–û–†–´','','','','','','','','']);
    Array.prototype.push.apply(out, closedRows);
  } else {
    Array.prototype.push.apply(out, collectionsToProcess.map(buildRow));
  }

  return out.length ? out : [['','','','','','','','','','']];
}

/** Calculate accrual for a specific family/collection pair */
function getSingleAccrual_(familyId, collectionId, statusFilter) {
  const onlyOpen = String(statusFilter||'OPEN').toUpperCase() !== 'ALL';
  const ss = SpreadsheetApp.getActive();
  const shF = ss.getSheetByName('–°–µ–º—å–∏');
  const shC = ss.getSheetByName('–°–±–æ—Ä—ã');
  const shU = ss.getSheetByName('–£—á–∞—Å—Ç–∏–µ');
  const shP = ss.getSheetByName('–ü–ª–∞—Ç–µ–∂–∏');

  const mapF = getHeaderMap_(shF);
  const mapC = getHeaderMap_(shC);
  const mapU = getHeaderMap_(shU);
  const mapP = getHeaderMap_(shP);

  // Get collection data
  let collectionData = null;
  const cRows = shC.getLastRow();
  if (cRows >= 2) {
    const C = shC.getRange(2, 1, cRows - 1, shC.getLastColumn()).getValues();
    const ch = shC.getRange(1,1,1,shC.getLastColumn()).getValues()[0];
    const ci={}; ch.forEach((h,idx)=>ci[h]=idx);
    C.forEach(row=>{
      const colId = String(row[ci['collection_id']]||'').trim();
      if (colId === collectionId) {
        collectionData = {
          status: String(row[ci['–°—Ç–∞—Ç—É—Å']]||'').trim(),
          accrual: String(row[ci['–ù–∞—á–∏—Å–ª–µ–Ω–∏–µ']]||'').trim(),
          paramT: Number(row[ci['–ü–∞—Ä–∞–º–µ—Ç—Ä —Å—É–º–º—ã']]||0),
          fixedX: Number(row[ci['–§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π x']]||0)
        };
      }
    });
  }
  
  if (!collectionData || (onlyOpen && collectionData.status !== '–û—Ç–∫—Ä—ã—Ç')) return 0;

  // Get active families and participation for this collection
  const activeFam = new Set();
  const famRows = shF.getLastRow();
  if (famRows >= 2) {
    const vals = shF.getRange(2, 1, famRows - 1, shF.getLastColumn()).getValues();
    const headers = shF.getRange(1,1,1,shF.getLastColumn()).getValues()[0];
    const i = {}; headers.forEach((h,idx)=>i[h]=idx);
    vals.forEach(r=>{
      const id = String(r[i['family_id']]||'').trim();
      const act = String(r[i['–ê–∫—Ç–∏–≤–µ–Ω']]||'').trim()==='–î–∞';
      if (id && act) activeFam.add(id);
    });
  }

  // Participation for this collection
  const partInclude = new Set();
  const partExclude = new Set();
  let hasInclude = false;
  const uRows = shU.getLastRow();
  if (uRows >= 2) {
    const U = shU.getRange(2, 1, uRows - 1, shU.getLastColumn()).getValues();
    const uh = shU.getRange(1,1,1,shU.getLastColumn()).getValues()[0];
    const ui={}; uh.forEach((h,idx)=>ui[h]=idx);
    U.forEach(r=>{
      const col = getIdFromLabelish_(String(r[ui['collection_id (label)']]||''));
      const fam = getIdFromLabelish_(String(r[ui['family_id (label)']]||''));
      const st = String(r[ui['–°—Ç–∞—Ç—É—Å']]||'').trim();
      if (col === collectionId && fam) {
        if (st === '–£—á–∞—Å—Ç–≤—É–µ—Ç') { hasInclude = true; partInclude.add(fam); }
        else if (st === '–ù–µ —É—á–∞—Å—Ç–≤—É–µ—Ç') { partExclude.add(fam); }
      }
    });
  }

  // Resolve participants
  const participants = new Set();
  if (hasInclude) partInclude.forEach(f=>participants.add(f));
  else activeFam.forEach(f=>participants.add(f));
  partExclude.forEach(f=>participants.delete(f));

  // Payments for this collection
  const famPays = new Map();
  const pRows = shP.getLastRow();
  if (pRows >= 2) {
    const P = shP.getRange(2, 1, pRows - 1, shP.getLastColumn()).getValues();
    const ph = shP.getRange(1,1,1,shP.getLastColumn()).getValues()[0];
    const pi={}; ph.forEach((h,idx)=>pi[h]=idx);
    P.forEach(r=>{
      const col = getIdFromLabelish_(String(r[pi['collection_id (label)']]||''));
      const fam = getIdFromLabelish_(String(r[pi['family_id (label)']]||''));
      const sum = Number(r[pi['–°—É–º–º–∞']]||0);
      if (col === collectionId && fam && sum > 0) {
        famPays.set(fam, (famPays.get(fam)||0) + sum);
      }
    });
  }

  // Fallback: use payers as participants if none resolved
  if (participants.size === 0) famPays.forEach((_, fid)=>participants.add(fid));

  const n = participants.size;
  const Pi = famPays.get(familyId) || 0;

  let accrued = 0;
  if (collectionData.accrual === 'static_per_child') {
    accrued = participants.has(familyId) ? collectionData.paramT : 0;
  } else if (collectionData.accrual === 'shared_total_all') {
    if (n > 0 && participants.has(familyId)) accrued = collectionData.paramT / n;
  } else if (collectionData.accrual === 'shared_total_by_payers') {
    // Share T equally among payers (within participants)
    let k = 0;
    famPays.forEach((sum, fid)=>{ if (participants.has(fid) && sum>0) k++; });
    if (k > 0 && participants.has(familyId) && (famPays.get(familyId)||0) > 0) accrued = collectionData.paramT / k; else accrued = 0;
  } else if (collectionData.accrual === 'dynamic_by_payers') {
    if (participants.has(familyId) && n > 0) {
      const payments = [];
      famPays.forEach((sum, fid)=>{ if (participants.has(fid) && sum>0) payments.push(sum); });
      const x = collectionData.fixedX > 0 ? collectionData.fixedX : DYN_CAP_(collectionData.paramT, payments);
      accrued = Math.min(Pi, x);
    }
  } else if (collectionData.accrual === 'proportional_by_payers') {
    if (participants.has(familyId)) {
      let sumP = 0;
      famPays.forEach((sum, fid)=>{ if (participants.has(fid) && sum>0) sumP += sum; });
      if (sumP > 0) {
        const target = Math.min(collectionData.paramT, sumP);
        const ratio = target / sumP;
        accrued = Pi > 0 ? (Pi * ratio) : 0;
      } else {
        accrued = 0;
      }
    }
  } else if (collectionData.accrual === 'unit_price_by_payers') {
  const x = collectionData.fixedX > 0 ? collectionData.fixedX : 0;
  if (participants.has(familyId) && x > 0) accrued = Math.floor(Pi / x) * x; else accrued = 0;
  }
  
  return round2_(accrued);
}

